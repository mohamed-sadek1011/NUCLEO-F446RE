
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002328  08002328  00012330  2**0
                  CONTENTS
  4 .ARM          00000000  08002328  08002328  00012330  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002328  08002330  00012330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002328  08002328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800232c  0800232c  0001232c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08002330  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08002330  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00012330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001428  00000000  00000000  0001235a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000488  00000000  00000000  00013782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00013c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  00013d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000326a  00000000  00000000  00013e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a1f  00000000  00000000  000170b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008aec  00000000  00000000  00018ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000215bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000514  00000000  00000000  00021610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002300 	.word	0x08002300

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08002300 	.word	0x08002300

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <main>:

#define cpu_SETENA (*(volatile uint32_t*)0xE000E100)


int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
	char buffer[20];

	rcc_sys_init_pllp_42MHz_all();
 80009fa:	f001 fa95 	bl	8001f28 <rcc_sys_init_pllp_42MHz_all>
	rcc_ahb1_clk_enable(RCC_GPIOA);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f001 fb50 	bl	80020a4 <rcc_ahb1_clk_enable>
	rcc_apb1_clk_enable(RCC_USART2);
 8000a04:	2011      	movs	r0, #17
 8000a06:	f001 fb63 	bl	80020d0 <rcc_apb1_clk_enable>

	gpio_pin_mode(GPIOA, gpio_pin5, output_push_pull);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <main+0xa8>)
 8000a10:	f000 f878 	bl	8000b04 <gpio_pin_mode>

	gpio_pin_mode(GPIOA, gpio_pin2, af_push_pull);
 8000a14:	2203      	movs	r2, #3
 8000a16:	2102      	movs	r1, #2
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <main+0xa8>)
 8000a1a:	f000 f873 	bl	8000b04 <gpio_pin_mode>
	gpio_pin_mode(GPIOA, gpio_pin3, af_open_drain);
 8000a1e:	2204      	movs	r2, #4
 8000a20:	2103      	movs	r1, #3
 8000a22:	481e      	ldr	r0, [pc, #120]	; (8000a9c <main+0xa8>)
 8000a24:	f000 f86e 	bl	8000b04 <gpio_pin_mode>
	gpio_pin_pull(GPIOA, gpio_pin3, pull_up);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	481b      	ldr	r0, [pc, #108]	; (8000a9c <main+0xa8>)
 8000a2e:	f000 f953 	bl	8000cd8 <gpio_pin_pull>

	gpio_pin_af(GPIOA, gpio_pin2, gpio_AF7);
 8000a32:	2207      	movs	r2, #7
 8000a34:	2102      	movs	r1, #2
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <main+0xa8>)
 8000a38:	f000 f9f0 	bl	8000e1c <gpio_pin_af>
	gpio_pin_af(GPIOA, gpio_pin3, gpio_AF7);
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	2103      	movs	r1, #3
 8000a40:	4816      	ldr	r0, [pc, #88]	; (8000a9c <main+0xa8>)
 8000a42:	f000 f9eb 	bl	8000e1c <gpio_pin_af>

	usart_init(USART2, 42000000, parity_disable, stop_bit_1, 9600);
 8000a46:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4913      	ldr	r1, [pc, #76]	; (8000aa0 <main+0xac>)
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <main+0xb0>)
 8000a54:	f001 fb52 	bl	80020fc <usart_init>

	/* Loop forever */
	while (1)
	{

		usart_read_string(USART2, buffer);
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <main+0xb0>)
 8000a5e:	f001 fc0b 	bl	8002278 <usart_read_string>
		if (!strcmp(buffer, "LED ON"))
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4910      	ldr	r1, [pc, #64]	; (8000aa8 <main+0xb4>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fbcc 	bl	8000204 <strcmp>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d105      	bne.n	8000a7e <main+0x8a>
		{
			gpio_pin_write(GPIOA, gpio_pin5, gpio_high);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2105      	movs	r1, #5
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <main+0xa8>)
 8000a78:	f000 f9a3 	bl	8000dc2 <gpio_pin_write>
 8000a7c:	e7ec      	b.n	8000a58 <main+0x64>
		}
		else if (!strcmp(buffer, "LED OFF"))
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	490a      	ldr	r1, [pc, #40]	; (8000aac <main+0xb8>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fbbe 	bl	8000204 <strcmp>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1e4      	bne.n	8000a58 <main+0x64>
		{
			gpio_pin_write(GPIOA, gpio_pin5, gpio_low);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2105      	movs	r1, #5
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <main+0xa8>)
 8000a94:	f000 f995 	bl	8000dc2 <gpio_pin_write>
		usart_read_string(USART2, buffer);
 8000a98:	e7de      	b.n	8000a58 <main+0x64>
 8000a9a:	bf00      	nop
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	0280de80 	.word	0x0280de80
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	08002318 	.word	0x08002318
 8000aac:	08002320 	.word	0x08002320

08000ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <LoopForever+0x6>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <LoopForever+0xe>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <LoopForever+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ade:	f001 fbeb 	bl	80022b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff ff87 	bl	80009f4 <main>

08000ae6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   r0, =_estack
 8000ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000af4:	08002330 	.word	0x08002330
  ldr r2, =_sbss
 8000af8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000afc:	2000001c 	.word	0x2000001c

08000b00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <gpio_pin_mode>:
 */

#include "gpio.h"

void gpio_pin_mode(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_mode_t mode)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
 8000b10:	4613      	mov	r3, r2
 8000b12:	70bb      	strb	r3, [r7, #2]
	switch (mode)
 8000b14:	78bb      	ldrb	r3, [r7, #2]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	f200 80c0 	bhi.w	8000c9c <gpio_pin_mode+0x198>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <gpio_pin_mode+0x20>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b3d 	.word	0x08000b3d
 8000b28:	08000b7f 	.word	0x08000b7f
 8000b2c:	08000c41 	.word	0x08000c41
 8000b30:	08000bbf 	.word	0x08000bbf
 8000b34:	08000c01 	.word	0x08000c01
 8000b38:	08000c71 	.word	0x08000c71
	{
	case output_push_pull:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	78fa      	ldrb	r2, [r7, #3]
 8000b42:	0052      	lsls	r2, r2, #1
 8000b44:	2101      	movs	r1, #1
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	78fa      	ldrb	r2, [r7, #3]
 8000b56:	0052      	lsls	r2, r2, #1
 8000b58:	3201      	adds	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	601a      	str	r2, [r3, #0]
		//OT 0: Output push-pull
		clr_bit(GPIOx->GPIOx_OTYPER,pin);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	78fa      	ldrb	r2, [r7, #3]
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f202 	lsl.w	r2, r1, r2
 8000b74:	43d2      	mvns	r2, r2
 8000b76:	401a      	ands	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	605a      	str	r2, [r3, #4]
		break;
 8000b7c:	e0a6      	b.n	8000ccc <gpio_pin_mode+0x1c8>

	case output_open_drain:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	0052      	lsls	r2, r2, #1
 8000b86:	2101      	movs	r1, #1
 8000b88:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	78fa      	ldrb	r2, [r7, #3]
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	3201      	adds	r2, #1
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	43d2      	mvns	r2, r2
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
		//OT 1: Output open-drain
		set_bit(GPIOx->GPIOx_OTYPER,pin);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	605a      	str	r2, [r3, #4]
		break;
 8000bbc:	e086      	b.n	8000ccc <gpio_pin_mode+0x1c8>

	case af_push_pull:
		//MODER 01: AF output mode
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	78fa      	ldrb	r2, [r7, #3]
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	601a      	str	r2, [r3, #0]
		set_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	0052      	lsls	r2, r2, #1
 8000bdc:	3201      	adds	r2, #1
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
		//OT 0: Output push-pull
		clr_bit(GPIOx->GPIOx_OTYPER,pin);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	78fa      	ldrb	r2, [r7, #3]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	43d2      	mvns	r2, r2
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	605a      	str	r2, [r3, #4]
		break;
 8000bfe:	e065      	b.n	8000ccc <gpio_pin_mode+0x1c8>

	case af_open_drain:
		//MODER 01: AF output mode
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	2101      	movs	r1, #1
 8000c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0e:	43d2      	mvns	r2, r2
 8000c10:	401a      	ands	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
		set_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	78fa      	ldrb	r2, [r7, #3]
 8000c1c:	0052      	lsls	r2, r2, #1
 8000c1e:	3201      	adds	r2, #1
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
		//OT 1: Output open-drain
		set_bit(GPIOx->GPIOx_OTYPER,pin);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	78fa      	ldrb	r2, [r7, #3]
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	605a      	str	r2, [r3, #4]
		break;
 8000c3e:	e045      	b.n	8000ccc <gpio_pin_mode+0x1c8>

	case input:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	78fa      	ldrb	r2, [r7, #3]
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	43d2      	mvns	r2, r2
 8000c50:	401a      	ands	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	0052      	lsls	r2, r2, #1
 8000c5e:	3201      	adds	r2, #1
 8000c60:	2101      	movs	r1, #1
 8000c62:	fa01 f202 	lsl.w	r2, r1, r2
 8000c66:	43d2      	mvns	r2, r2
 8000c68:	401a      	ands	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
		break;
 8000c6e:	e02d      	b.n	8000ccc <gpio_pin_mode+0x1c8>

	case analog:
		//MODER 11: Analog mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	78fa      	ldrb	r2, [r7, #3]
 8000c76:	0052      	lsls	r2, r2, #1
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	601a      	str	r2, [r3, #0]
		set_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	78fa      	ldrb	r2, [r7, #3]
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	3201      	adds	r2, #1
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f202 	lsl.w	r2, r1, r2
 8000c94:	431a      	orrs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
		break;
 8000c9a:	e017      	b.n	8000ccc <gpio_pin_mode+0x1c8>

	default:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	78fa      	ldrb	r2, [r7, #3]
 8000ca2:	0052      	lsls	r2, r2, #1
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8000caa:	43d2      	mvns	r2, r2
 8000cac:	401a      	ands	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	78fa      	ldrb	r2, [r7, #3]
 8000cb8:	0052      	lsls	r2, r2, #1
 8000cba:	3201      	adds	r2, #1
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	43d2      	mvns	r2, r2
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
		break;
 8000cca:	bf00      	nop
	}
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <gpio_pin_pull>:

void gpio_pin_pull(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_pull_t pull)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	70bb      	strb	r3, [r7, #2]
	switch (pull)
 8000ce8:	78bb      	ldrb	r3, [r7, #2]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d035      	beq.n	8000d5a <gpio_pin_pull+0x82>
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	dc4a      	bgt.n	8000d88 <gpio_pin_pull+0xb0>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <gpio_pin_pull+0x24>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d018      	beq.n	8000d2c <gpio_pin_pull+0x54>
 8000cfa:	e045      	b.n	8000d88 <gpio_pin_pull+0xb0>
	{
	case no_pull:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	78fa      	ldrb	r2, [r7, #3]
 8000d02:	0052      	lsls	r2, r2, #1
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	43d2      	mvns	r2, r2
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	78fa      	ldrb	r2, [r7, #3]
 8000d18:	0052      	lsls	r2, r2, #1
 8000d1a:	3201      	adds	r2, #1
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	43d2      	mvns	r2, r2
 8000d24:	401a      	ands	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60da      	str	r2, [r3, #12]
		break;
 8000d2a:	e045      	b.n	8000db8 <gpio_pin_pull+0xe0>

	case pull_up:
		//PUPDR 01: Pull-up
		set_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	0052      	lsls	r2, r2, #1
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	78fa      	ldrb	r2, [r7, #3]
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	3201      	adds	r2, #1
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	401a      	ands	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
		break;
 8000d58:	e02e      	b.n	8000db8 <gpio_pin_pull+0xe0>

	case pull_down:
		//PUPDR 10: Pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	78fa      	ldrb	r2, [r7, #3]
 8000d60:	0052      	lsls	r2, r2, #1
 8000d62:	2101      	movs	r1, #1
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	60da      	str	r2, [r3, #12]
		set_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	0052      	lsls	r2, r2, #1
 8000d78:	3201      	adds	r2, #1
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60da      	str	r2, [r3, #12]
		break;
 8000d86:	e017      	b.n	8000db8 <gpio_pin_pull+0xe0>

	default:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	78fa      	ldrb	r2, [r7, #3]
 8000d8e:	0052      	lsls	r2, r2, #1
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	43d2      	mvns	r2, r2
 8000d98:	401a      	ands	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	0052      	lsls	r2, r2, #1
 8000da6:	3201      	adds	r2, #1
 8000da8:	2101      	movs	r1, #1
 8000daa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dae:	43d2      	mvns	r2, r2
 8000db0:	401a      	ands	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60da      	str	r2, [r3, #12]
		break;
 8000db6:	bf00      	nop
	}
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <gpio_pin_write>:

void gpio_pin_write(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_level level)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70fb      	strb	r3, [r7, #3]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	70bb      	strb	r3, [r7, #2]
	switch (level)
 8000dd2:	78bb      	ldrb	r3, [r7, #2]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d002      	beq.n	8000dde <gpio_pin_write+0x1c>
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d009      	beq.n	8000df0 <gpio_pin_write+0x2e>
 8000ddc:	e010      	b.n	8000e00 <gpio_pin_write+0x3e>
	{
	case gpio_low:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<(pin+16));
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	3310      	adds	r3, #16
 8000de2:	2201      	movs	r2, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]
		break;
 8000dee:	e00f      	b.n	8000e10 <gpio_pin_write+0x4e>

	case gpio_high:
		//BS 1: Sets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	2201      	movs	r2, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	619a      	str	r2, [r3, #24]
		break;
 8000dfe:	e007      	b.n	8000e10 <gpio_pin_write+0x4e>

	default:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2201      	movs	r2, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	619a      	str	r2, [r3, #24]
		break;
 8000e0e:	bf00      	nop
	}
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
	...

08000e1c <gpio_pin_af>:
{
	return ( get_bit(GPIOx->GPIOx_IDR,pin));
}

void gpio_pin_af(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_af_t af)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	70bb      	strb	r3, [r7, #2]
	if (pin <8)
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	2b07      	cmp	r3, #7
 8000e30:	f200 831b 	bhi.w	800146a <gpio_pin_af+0x64e>
	{
		switch (af)
 8000e34:	78bb      	ldrb	r3, [r7, #2]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	f200 830f 	bhi.w	800145a <gpio_pin_af+0x63e>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <gpio_pin_af+0x28>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e85 	.word	0x08000e85
 8000e48:	08000ee7 	.word	0x08000ee7
 8000e4c:	08000f47 	.word	0x08000f47
 8000e50:	08000fa7 	.word	0x08000fa7
 8000e54:	08001005 	.word	0x08001005
 8000e58:	08001065 	.word	0x08001065
 8000e5c:	080010c3 	.word	0x080010c3
 8000e60:	08001121 	.word	0x08001121
 8000e64:	0800117d 	.word	0x0800117d
 8000e68:	080011dd 	.word	0x080011dd
 8000e6c:	0800123b 	.word	0x0800123b
 8000e70:	08001299 	.word	0x08001299
 8000e74:	080012f3 	.word	0x080012f3
 8000e78:	0800134f 	.word	0x0800134f
 8000e7c:	080013a9 	.word	0x080013a9
 8000e80:	08001403 	.word	0x08001403
		{
		case gpio_AF0:
			//AF0 0000: Select Alternative Function 0
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	78fa      	ldrb	r2, [r7, #3]
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	43d2      	mvns	r2, r2
 8000e94:	401a      	ands	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	78fa      	ldrb	r2, [r7, #3]
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	3201      	adds	r2, #1
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	43d2      	mvns	r2, r2
 8000eac:	401a      	ands	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	78fa      	ldrb	r2, [r7, #3]
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	3202      	adds	r2, #2
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	43d2      	mvns	r2, r2
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	78fa      	ldrb	r2, [r7, #3]
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	3203      	adds	r2, #3
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	43d2      	mvns	r2, r2
 8000edc:	401a      	ands	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	621a      	str	r2, [r3, #32]
			break;
 8000ee2:	f000 be00 	b.w	8001ae6 <gpio_pin_af+0xcca>

		case gpio_AF1:
			//AF0 0001: Select Alternative Function 1
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	78fa      	ldrb	r2, [r7, #3]
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	78fa      	ldrb	r2, [r7, #3]
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	3201      	adds	r2, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	43d2      	mvns	r2, r2
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	3202      	adds	r2, #2
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	43d2      	mvns	r2, r2
 8000f24:	401a      	ands	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	3203      	adds	r2, #3
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	43d2      	mvns	r2, r2
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	621a      	str	r2, [r3, #32]
			break;
 8000f42:	f000 bdd0 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF2:
			//AF0 0010: Select Alternative Function 2
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	78fa      	ldrb	r2, [r7, #3]
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	401a      	ands	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	78fa      	ldrb	r2, [r7, #3]
 8000f62:	0092      	lsls	r2, r2, #2
 8000f64:	3201      	adds	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	3202      	adds	r2, #2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	43d2      	mvns	r2, r2
 8000f84:	401a      	ands	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	3203      	adds	r2, #3
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	43d2      	mvns	r2, r2
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	621a      	str	r2, [r3, #32]
			break;
 8000fa2:	f000 bda0 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF3:
			//AF0 0011: Select Alternative Function 3
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	78fa      	ldrb	r2, [r7, #3]
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	3201      	adds	r2, #1
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	78fa      	ldrb	r2, [r7, #3]
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	3202      	adds	r2, #2
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	43d2      	mvns	r2, r2
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	3203      	adds	r2, #3
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	43d2      	mvns	r2, r2
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	621a      	str	r2, [r3, #32]
			break;
 8001000:	f000 bd71 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF4:
			//AF0 0100: Select Alternative Function 4
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	43d2      	mvns	r2, r2
 8001014:	401a      	ands	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	78fa      	ldrb	r2, [r7, #3]
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	3201      	adds	r2, #1
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	43d2      	mvns	r2, r2
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	0092      	lsls	r2, r2, #2
 800103a:	3202      	adds	r2, #2
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	78fa      	ldrb	r2, [r7, #3]
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	3203      	adds	r2, #3
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	43d2      	mvns	r2, r2
 800105a:	401a      	ands	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	621a      	str	r2, [r3, #32]
			break;
 8001060:	f000 bd41 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF5:
			//AF0 0101: Select Alternative Function 5
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	78fa      	ldrb	r2, [r7, #3]
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	3201      	adds	r2, #1
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	43d2      	mvns	r2, r2
 800108a:	401a      	ands	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	78fa      	ldrb	r2, [r7, #3]
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	3202      	adds	r2, #2
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f202 	lsl.w	r2, r1, r2
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	78fa      	ldrb	r2, [r7, #3]
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	3203      	adds	r2, #3
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	43d2      	mvns	r2, r2
 80010b8:	401a      	ands	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	621a      	str	r2, [r3, #32]
			break;
 80010be:	f000 bd12 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF6:
			//AF0 0110: Select Alternative Function 6
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	43d2      	mvns	r2, r2
 80010d2:	401a      	ands	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	78fa      	ldrb	r2, [r7, #3]
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	3201      	adds	r2, #1
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	78fa      	ldrb	r2, [r7, #3]
 80010f4:	0092      	lsls	r2, r2, #2
 80010f6:	3202      	adds	r2, #2
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	78fa      	ldrb	r2, [r7, #3]
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	3203      	adds	r2, #3
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	43d2      	mvns	r2, r2
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	621a      	str	r2, [r3, #32]
			break;
 800111c:	f000 bce3 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF7:
			//AF0 0111: Select Alternative Function 7
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	78fa      	ldrb	r2, [r7, #3]
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f202 	lsl.w	r2, r1, r2
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	78fa      	ldrb	r2, [r7, #3]
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	3201      	adds	r2, #1
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	78fa      	ldrb	r2, [r7, #3]
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	3202      	adds	r2, #2
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	3203      	adds	r2, #3
 800116a:	2101      	movs	r1, #1
 800116c:	fa01 f202 	lsl.w	r2, r1, r2
 8001170:	43d2      	mvns	r2, r2
 8001172:	401a      	ands	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	621a      	str	r2, [r3, #32]
			break;
 8001178:	f000 bcb5 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF8:
			//AF0 1000: Select Alternative Function 8
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	78fa      	ldrb	r2, [r7, #3]
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	43d2      	mvns	r2, r2
 800118c:	401a      	ands	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	78fa      	ldrb	r2, [r7, #3]
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	3201      	adds	r2, #1
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	43d2      	mvns	r2, r2
 80011a4:	401a      	ands	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	3202      	adds	r2, #2
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	43d2      	mvns	r2, r2
 80011bc:	401a      	ands	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	78fa      	ldrb	r2, [r7, #3]
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	3203      	adds	r2, #3
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	621a      	str	r2, [r3, #32]
			break;
 80011d8:	f000 bc85 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF9:
			//AF0 1001: Select Alternative Function 9
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	78fa      	ldrb	r2, [r7, #3]
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	2101      	movs	r1, #1
 80011e6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	3201      	adds	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001200:	43d2      	mvns	r2, r2
 8001202:	401a      	ands	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	3202      	adds	r2, #2
 8001212:	2101      	movs	r1, #1
 8001214:	fa01 f202 	lsl.w	r2, r1, r2
 8001218:	43d2      	mvns	r2, r2
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	3203      	adds	r2, #3
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	621a      	str	r2, [r3, #32]
			break;
 8001236:	f000 bc56 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF10:
			//AF0 1010: Select Alternative Function 10
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	78fa      	ldrb	r2, [r7, #3]
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	78fa      	ldrb	r2, [r7, #3]
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	3201      	adds	r2, #1
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	3202      	adds	r2, #2
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	43d2      	mvns	r2, r2
 8001278:	401a      	ands	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	3203      	adds	r2, #3
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	621a      	str	r2, [r3, #32]
			break;
 8001294:	f000 bc27 	b.w	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF11:
			//AF0 1011: Select Alternative Function 11
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	78fa      	ldrb	r2, [r7, #3]
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	78fa      	ldrb	r2, [r7, #3]
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	3201      	adds	r2, #1
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	78fa      	ldrb	r2, [r7, #3]
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	3202      	adds	r2, #2
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	43d2      	mvns	r2, r2
 80012d4:	401a      	ands	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	78fa      	ldrb	r2, [r7, #3]
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	3203      	adds	r2, #3
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	621a      	str	r2, [r3, #32]
			break;
 80012f0:	e3f9      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF12:
			//AF0 1100: Select Alternative Function 12
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	43d2      	mvns	r2, r2
 8001302:	401a      	ands	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	3201      	adds	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	43d2      	mvns	r2, r2
 800131a:	401a      	ands	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	78fa      	ldrb	r2, [r7, #3]
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	3202      	adds	r2, #2
 800132a:	2101      	movs	r1, #1
 800132c:	fa01 f202 	lsl.w	r2, r1, r2
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	3203      	adds	r2, #3
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	621a      	str	r2, [r3, #32]
			break;
 800134c:	e3cb      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF13:
			//AF0 1101: Select Alternative Function 13
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	2101      	movs	r1, #1
 8001358:	fa01 f202 	lsl.w	r2, r1, r2
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	621a      	str	r2, [r3, #32]
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	78fa      	ldrb	r2, [r7, #3]
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	3201      	adds	r2, #1
 800136c:	2101      	movs	r1, #1
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	43d2      	mvns	r2, r2
 8001374:	401a      	ands	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	3202      	adds	r2, #2
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	78fa      	ldrb	r2, [r7, #3]
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	3203      	adds	r2, #3
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	621a      	str	r2, [r3, #32]
			break;
 80013a6:	e39e      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF14:
			//AF0 1110: Select Alternative Function 14
			clr_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	43d2      	mvns	r2, r2
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	78fa      	ldrb	r2, [r7, #3]
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	3201      	adds	r2, #1
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	3202      	adds	r2, #2
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f202 	lsl.w	r2, r1, r2
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	3203      	adds	r2, #3
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f202 	lsl.w	r2, r1, r2
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	621a      	str	r2, [r3, #32]
			break;
 8001400:	e371      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF15:
			//AF0 1111: Select Alternative Function 15
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	78fa      	ldrb	r2, [r7, #3]
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+1));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	3201      	adds	r2, #1
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+2));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	78fa      	ldrb	r2, [r7, #3]
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	3202      	adds	r2, #2
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	621a      	str	r2, [r3, #32]
			set_bit(GPIOx->GPIOx_AFRL,((pin*4)+3));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	78fa      	ldrb	r2, [r7, #3]
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	3203      	adds	r2, #3
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f202 	lsl.w	r2, r1, r2
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	621a      	str	r2, [r3, #32]
			break;
 8001458:	e345      	b.n	8001ae6 <gpio_pin_af+0xcca>

		default:
			//BR 1: Resets the corresponding ODRx bit
			GPIOx->GPIOx_BSRR = (1<<pin);
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2201      	movs	r2, #1
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
			break;
 8001468:	e33d      	b.n	8001ae6 <gpio_pin_af+0xcca>
		}
	}
	else
	{
		switch (af)
 800146a:	78bb      	ldrb	r3, [r7, #2]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	f200 8339 	bhi.w	8001ae4 <gpio_pin_af+0xcc8>
 8001472:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <gpio_pin_af+0x65c>)
 8001474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001478:	080014b9 	.word	0x080014b9
 800147c:	0800151d 	.word	0x0800151d
 8001480:	08001583 	.word	0x08001583
 8001484:	080015e9 	.word	0x080015e9
 8001488:	0800164d 	.word	0x0800164d
 800148c:	080016b3 	.word	0x080016b3
 8001490:	08001717 	.word	0x08001717
 8001494:	08001777 	.word	0x08001777
 8001498:	080017d5 	.word	0x080017d5
 800149c:	08001833 	.word	0x08001833
 80014a0:	08001897 	.word	0x08001897
 80014a4:	080018fb 	.word	0x080018fb
 80014a8:	0800195d 	.word	0x0800195d
 80014ac:	080019c1 	.word	0x080019c1
 80014b0:	08001a23 	.word	0x08001a23
 80014b4:	08001a85 	.word	0x08001a85
		{
		case gpio_AF0:
			//AF0 0000: Select Alternative Function 0
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	78fa      	ldrb	r2, [r7, #3]
 80014be:	3a08      	subs	r2, #8
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa01 f202 	lsl.w	r2, r1, r2
 80014c8:	43d2      	mvns	r2, r2
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8))+1));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	78fa      	ldrb	r2, [r7, #3]
 80014d6:	3a07      	subs	r2, #7
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	43d2      	mvns	r2, r2
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	3a08      	subs	r2, #8
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	3202      	adds	r2, #2
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	43d2      	mvns	r2, r2
 80014fa:	401a      	ands	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	3a08      	subs	r2, #8
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	3203      	adds	r2, #3
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	43d2      	mvns	r2, r2
 8001514:	401a      	ands	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800151a:	e2e4      	b.n	8001ae6 <gpio_pin_af+0xcca>

		case gpio_AF1:
			//AF0 0001: Select Alternative Function 1
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	3a08      	subs	r2, #8
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	3a08      	subs	r2, #8
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	3201      	adds	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f202 	lsl.w	r2, r1, r2
 8001544:	43d2      	mvns	r2, r2
 8001546:	401a      	ands	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	78fa      	ldrb	r2, [r7, #3]
 8001552:	3a08      	subs	r2, #8
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	3202      	adds	r2, #2
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	43d2      	mvns	r2, r2
 8001560:	401a      	ands	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	3a08      	subs	r2, #8
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	3203      	adds	r2, #3
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	43d2      	mvns	r2, r2
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001580:	e2b1      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF2:
			//AF0 0010: Select Alternative Function 2
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	3a08      	subs	r2, #8
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	43d2      	mvns	r2, r2
 8001594:	401a      	ands	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	3a08      	subs	r2, #8
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	3201      	adds	r2, #1
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	3a08      	subs	r2, #8
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	3202      	adds	r2, #2
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	43d2      	mvns	r2, r2
 80015c6:	401a      	ands	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	78fa      	ldrb	r2, [r7, #3]
 80015d2:	3a08      	subs	r2, #8
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	3203      	adds	r2, #3
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	43d2      	mvns	r2, r2
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80015e6:	e27e      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF3:
			//AF0 0011: Select Alternative Function 3
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	3a08      	subs	r2, #8
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	3a08      	subs	r2, #8
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	3201      	adds	r2, #1
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	3a08      	subs	r2, #8
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	3202      	adds	r2, #2
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	43d2      	mvns	r2, r2
 800162a:	401a      	ands	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	78fa      	ldrb	r2, [r7, #3]
 8001636:	3a08      	subs	r2, #8
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	3203      	adds	r2, #3
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	43d2      	mvns	r2, r2
 8001644:	401a      	ands	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800164a:	e24c      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF4:
			//AF0 0100: Select Alternative Function 4
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	3a08      	subs	r2, #8
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	43d2      	mvns	r2, r2
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	3a08      	subs	r2, #8
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	3201      	adds	r2, #1
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	43d2      	mvns	r2, r2
 8001678:	401a      	ands	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	3a08      	subs	r2, #8
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	3202      	adds	r2, #2
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	3a08      	subs	r2, #8
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	3203      	adds	r2, #3
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	43d2      	mvns	r2, r2
 80016aa:	401a      	ands	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80016b0:	e219      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF5:
			//AF0 0101: Select Alternative Function 5
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	78fa      	ldrb	r2, [r7, #3]
 80016b8:	3a08      	subs	r2, #8
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	2101      	movs	r1, #1
 80016be:	fa01 f202 	lsl.w	r2, r1, r2
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	78fa      	ldrb	r2, [r7, #3]
 80016ce:	3a08      	subs	r2, #8
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	3201      	adds	r2, #1
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f202 	lsl.w	r2, r1, r2
 80016da:	43d2      	mvns	r2, r2
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	3a08      	subs	r2, #8
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	3202      	adds	r2, #2
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	3a08      	subs	r2, #8
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	3203      	adds	r2, #3
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	43d2      	mvns	r2, r2
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001714:	e1e7      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF6:
			//AF0 0110: Select Alternative Function 6
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	3a08      	subs	r2, #8
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	43d2      	mvns	r2, r2
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8))+1));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	3a07      	subs	r2, #7
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	3a08      	subs	r2, #8
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	3202      	adds	r2, #2
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f202 	lsl.w	r2, r1, r2
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	78fa      	ldrb	r2, [r7, #3]
 8001760:	3a08      	subs	r2, #8
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	3203      	adds	r2, #3
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	43d2      	mvns	r2, r2
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001774:	e1b7      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF7:
			//AF0 0111: Select Alternative Function 7
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	3a08      	subs	r2, #8
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8))+1));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	3a07      	subs	r2, #7
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f202 	lsl.w	r2, r1, r2
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	3a08      	subs	r2, #8
 80017a8:	0092      	lsls	r2, r2, #2
 80017aa:	3202      	adds	r2, #2
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	3a08      	subs	r2, #8
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	3203      	adds	r2, #3
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	43d2      	mvns	r2, r2
 80017cc:	401a      	ands	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80017d2:	e188      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF8:
			//AF0 1000: Select Alternative Function 8
			clr_bit(GPIOx->GPIOx_AFRH,((pin*4)));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	2101      	movs	r1, #1
 80017de:	fa01 f202 	lsl.w	r2, r1, r2
 80017e2:	43d2      	mvns	r2, r2
 80017e4:	401a      	ands	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,((pin*4)+1));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	3201      	adds	r2, #1
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	43d2      	mvns	r2, r2
 80017fc:	401a      	ands	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,((pin*4)+2));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	3202      	adds	r2, #2
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	43d2      	mvns	r2, r2
 8001814:	401a      	ands	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,((pin*4)+3));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	3203      	adds	r2, #3
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001830:	e159      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF9:
			//AF0 1001: Select Alternative Function 9
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	3a08      	subs	r2, #8
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	2101      	movs	r1, #1
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	3a08      	subs	r2, #8
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	3201      	adds	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	43d2      	mvns	r2, r2
 800185c:	401a      	ands	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	3a08      	subs	r2, #8
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	3202      	adds	r2, #2
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f202 	lsl.w	r2, r1, r2
 8001874:	43d2      	mvns	r2, r2
 8001876:	401a      	ands	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	3a08      	subs	r2, #8
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	3203      	adds	r2, #3
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001894:	e127      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF10:
			//AF0 1010: Select Alternative Function 10
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	3a08      	subs	r2, #8
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	43d2      	mvns	r2, r2
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	3a08      	subs	r2, #8
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	3201      	adds	r2, #1
 80018ba:	2101      	movs	r1, #1
 80018bc:	fa01 f202 	lsl.w	r2, r1, r2
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	3a08      	subs	r2, #8
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	3202      	adds	r2, #2
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	43d2      	mvns	r2, r2
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	3a08      	subs	r2, #8
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	3203      	adds	r2, #3
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80018f8:	e0f5      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF11:
			//AF0 1011: Select Alternative Function 11
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	3a08      	subs	r2, #8
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	3a08      	subs	r2, #8
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	3201      	adds	r2, #1
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	78fa      	ldrb	r2, [r7, #3]
 800192e:	3a08      	subs	r2, #8
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	3202      	adds	r2, #2
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	43d2      	mvns	r2, r2
 800193c:	401a      	ands	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	3a08      	subs	r2, #8
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	3203      	adds	r2, #3
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800195a:	e0c4      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF12:
			//AF0 1100: Select Alternative Function 12
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	3a08      	subs	r2, #8
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	43d2      	mvns	r2, r2
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	3a08      	subs	r2, #8
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	3201      	adds	r2, #1
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	43d2      	mvns	r2, r2
 8001988:	401a      	ands	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	3a08      	subs	r2, #8
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	3202      	adds	r2, #2
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	3a08      	subs	r2, #8
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	3203      	adds	r2, #3
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80019be:	e092      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF13:
			//AF0 1101: Select Alternative Function 13
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	3a08      	subs	r2, #8
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	2101      	movs	r1, #1
 80019cc:	fa01 f202 	lsl.w	r2, r1, r2
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	3a08      	subs	r2, #8
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	3201      	adds	r2, #1
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	43d2      	mvns	r2, r2
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	3a08      	subs	r2, #8
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	3202      	adds	r2, #2
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	3a08      	subs	r2, #8
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	3203      	adds	r2, #3
 8001a14:	2101      	movs	r1, #1
 8001a16:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001a20:	e061      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF14:
			//AF0 1110: Select Alternative Function 14
			clr_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	78fa      	ldrb	r2, [r7, #3]
 8001a28:	3a08      	subs	r2, #8
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a32:	43d2      	mvns	r2, r2
 8001a34:	401a      	ands	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	3a08      	subs	r2, #8
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	3201      	adds	r2, #1
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	3a08      	subs	r2, #8
 8001a5a:	0092      	lsls	r2, r2, #2
 8001a5c:	3202      	adds	r2, #2
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	3a08      	subs	r2, #8
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	3203      	adds	r2, #3
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001a82:	e030      	b.n	8001ae6 <gpio_pin_af+0xcca>
		case gpio_AF15:
			//AF0 1111: Select Alternative Function 15
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	3a08      	subs	r2, #8
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+1));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	3a08      	subs	r2, #8
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	3201      	adds	r2, #1
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+2));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	3a08      	subs	r2, #8
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	3202      	adds	r2, #2
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
			set_bit(GPIOx->GPIOx_AFRH,(((pin-8)*4)+3));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	3a08      	subs	r2, #8
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	3203      	adds	r2, #3
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001ae2:	e000      	b.n	8001ae6 <gpio_pin_af+0xcca>

		default:
			//BR 1: Resets the corresponding ODRx bit

			break;
 8001ae4:	bf00      	nop
		}
	}
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <AHB_PRE_SELECT>:
 *      Author: moham
 */
#include "rcc.h"

static void AHB_PRE_SELECT (rcc_ahb_pre_t AHB_PRE)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	switch (AHB_PRE)
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80f6 	bhi.w	8001cee <AHB_PRE_SELECT+0x1fe>
 8001b02:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <AHB_PRE_SELECT+0x18>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b2d 	.word	0x08001b2d
 8001b0c:	08001b5f 	.word	0x08001b5f
 8001b10:	08001b91 	.word	0x08001b91
 8001b14:	08001bc3 	.word	0x08001bc3
 8001b18:	08001bf5 	.word	0x08001bf5
 8001b1c:	08001c27 	.word	0x08001c27
 8001b20:	08001c59 	.word	0x08001c59
 8001b24:	08001c8b 	.word	0x08001c8b
 8001b28:	08001cbd 	.word	0x08001cbd
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001b2c:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a7e      	ldr	r2, [pc, #504]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b32:	f023 0310 	bic.w	r3, r3, #16
 8001b36:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001b38:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a7b      	ldr	r2, [pc, #492]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b3e:	f023 0320 	bic.w	r3, r3, #32
 8001b42:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001b44:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b4e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8001b50:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a75      	ldr	r2, [pc, #468]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b5a:	6093      	str	r3, [r2, #8]
		break;
 8001b5c:	e0e0      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b64:	f023 0310 	bic.w	r3, r3, #16
 8001b68:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4a6f      	ldr	r2, [pc, #444]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b70:	f023 0320 	bic.w	r3, r3, #32
 8001b74:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4a6c      	ldr	r2, [pc, #432]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b80:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	6093      	str	r3, [r2, #8]
		break;
 8001b8e:	e0c7      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001b9c:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a62      	ldr	r2, [pc, #392]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001ba2:	f023 0320 	bic.w	r3, r3, #32
 8001ba6:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001ba8:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a5f      	ldr	r2, [pc, #380]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bb2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001bb4:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a5c      	ldr	r2, [pc, #368]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbe:	6093      	str	r3, [r2, #8]
		break;
 8001bc0:	e0ae      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4a59      	ldr	r2, [pc, #356]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bc8:	f023 0310 	bic.w	r3, r3, #16
 8001bcc:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001bce:	4b57      	ldr	r3, [pc, #348]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bd4:	f043 0320 	orr.w	r3, r3, #32
 8001bd8:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4a53      	ldr	r2, [pc, #332]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001be4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001be6:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	4a50      	ldr	r2, [pc, #320]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf0:	6093      	str	r3, [r2, #8]
		break;
 8001bf2:	e095      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001bf4:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c06:	f043 0320 	orr.w	r3, r3, #32
 8001c0a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001c0c:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c16:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001c18:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a43      	ldr	r2, [pc, #268]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c22:	6093      	str	r3, [r2, #8]
		break;
 8001c24:	e07c      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_64:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4a40      	ldr	r2, [pc, #256]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c2c:	f023 0310 	bic.w	r3, r3, #16
 8001c30:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4a3d      	ldr	r2, [pc, #244]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c38:	f023 0320 	bic.w	r3, r3, #32
 8001c3c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4a3a      	ldr	r2, [pc, #232]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c48:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	4a37      	ldr	r2, [pc, #220]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	6093      	str	r3, [r2, #8]
		break;
 8001c56:	e063      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_128:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001c64:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c6a:	f023 0320 	bic.w	r3, r3, #32
 8001c6e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c7a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c86:	6093      	str	r3, [r2, #8]
		break;
 8001c88:	e04a      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_256:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c90:	f023 0310 	bic.w	r3, r3, #16
 8001c94:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cac:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb8:	6093      	str	r3, [r2, #8]
		break;
 8001cba:	e031      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_512:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cde:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cea:	6093      	str	r3, [r2, #8]
		break;
 8001cec:	e018      	b.n	8001d20 <AHB_PRE_SELECT+0x230>
	default:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cf4:	f023 0310 	bic.w	r3, r3, #16
 8001cf8:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001d00:	f023 0320 	bic.w	r3, r3, #32
 8001d04:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d10:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <AHB_PRE_SELECT+0x23c>)
 8001d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d1c:	6093      	str	r3, [r2, #8]
		break;
 8001d1e:	bf00      	nop
	}
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <APB1_PRE_SELECT>:

static void APB1_PRE_SELECT (rcc_ahb_pre_t APB1_PRE)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	switch (APB1_PRE)
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d86c      	bhi.n	8001e1a <APB1_PRE_SELECT+0xea>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <APB1_PRE_SELECT+0x18>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d83 	.word	0x08001d83
 8001d50:	08001da9 	.word	0x08001da9
 8001d54:	08001dcf 	.word	0x08001dcf
 8001d58:	08001df5 	.word	0x08001df5
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d66:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d72:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE12);
 8001d74:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d7e:	6093      	str	r3, [r2, #8]
		break;
 8001d80:	e04c      	b.n	8001e1c <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d8c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d98:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001da4:	6093      	str	r3, [r2, #8]
		break;
 8001da6:	e039      	b.n	8001e1c <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db2:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dbe:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dca:	6093      	str	r3, [r2, #8]
		break;
 8001dcc:	e026      	b.n	8001e1c <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dd8:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df0:	6093      	str	r3, [r2, #8]
		break;
 8001df2:	e013      	b.n	8001e1c <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfe:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e0a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <APB1_PRE_SELECT+0xf8>)
 8001e12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e16:	6093      	str	r3, [r2, #8]
		break;
 8001e18:	e000      	b.n	8001e1c <APB1_PRE_SELECT+0xec>
	default:
		break;
 8001e1a:	bf00      	nop
	}
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800

08001e2c <APB2_PRE_SELECT>:

static void APB2_PRE_SELECT (rcc_ahb_pre_t APB2_PRE)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
	switch (APB2_PRE)
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d86c      	bhi.n	8001f16 <APB2_PRE_SELECT+0xea>
 8001e3c:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <APB2_PRE_SELECT+0x18>)
 8001e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e42:	bf00      	nop
 8001e44:	08001e59 	.word	0x08001e59
 8001e48:	08001e7f 	.word	0x08001e7f
 8001e4c:	08001ea5 	.word	0x08001ea5
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ef1 	.word	0x08001ef1
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4a31      	ldr	r2, [pc, #196]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e62:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8001e64:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e6e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE22);
 8001e70:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	4a2b      	ldr	r2, [pc, #172]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e7a:	6093      	str	r3, [r2, #8]
		break;
 8001e7c:	e04c      	b.n	8001f18 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e88:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e94:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4a22      	ldr	r2, [pc, #136]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea0:	6093      	str	r3, [r2, #8]
		break;
 8001ea2:	e039      	b.n	8001f18 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001eaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eae:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eba:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec6:	6093      	str	r3, [r2, #8]
		break;
 8001ec8:	e026      	b.n	8001f18 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ed4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eec:	6093      	str	r3, [r2, #8]
		break;
 8001eee:	e013      	b.n	8001f18 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001ef6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001efa:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f06:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <APB2_PRE_SELECT+0xf8>)
 8001f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f12:	6093      	str	r3, [r2, #8]
		break;
 8001f14:	e000      	b.n	8001f18 <APB2_PRE_SELECT+0xec>
	default:
		break;
 8001f16:	bf00      	nop
	}
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <rcc_sys_init_pllp_42MHz_all>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b01 );
}

void rcc_sys_init_pllp_42MHz_all(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0

	//• f(VCO clock) = f(PLL clock input) × (PLLN / PLLM) >> 16M × (84 / 8) = 168M
	//• f(PLL general clock output) = f(VCO clock) / PLLP >> 168 / 2 = 84

	//HSI_as_source
	clr_bit(RCC->RCC_PLLCFGR,PLLSRC);
 8001f2c:	4b5c      	ldr	r3, [pc, #368]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4a5b      	ldr	r2, [pc, #364]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f32:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f36:	6053      	str	r3, [r2, #4]

	//Q = 4 >> 0b0100
	clr_bit(RCC->RCC_PLLCFGR,PLLQ0);
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f42:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ1);
 8001f44:	4b56      	ldr	r3, [pc, #344]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a55      	ldr	r2, [pc, #340]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLQ2);
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f5a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ3);
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f62:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001f66:	6053      	str	r3, [r2, #4]

	//P = 2 >> 0b00
	clr_bit(RCC->RCC_PLLCFGR,PLLP0);
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLP1);
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a49      	ldr	r2, [pc, #292]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f7e:	6053      	str	r3, [r2, #4]

	//N = 84 >> 0b001010100
	clr_bit(RCC->RCC_PLLCFGR,PLLN0);
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a46      	ldr	r2, [pc, #280]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f8a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN1);
 8001f8c:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a43      	ldr	r2, [pc, #268]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f96:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN2);
 8001f98:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN3);
 8001fa4:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001faa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fae:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN4);
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a3a      	ldr	r2, [pc, #232]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fba:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN5);
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fc6:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN6);
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN7);
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fde:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN8);
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fea:	6053      	str	r3, [r2, #4]

	//M = 8 >> 0b01000
	clr_bit(RCC->RCC_PLLCFGR,PLLM0);
 8001fec:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM1);
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8001ffe:	f023 0302 	bic.w	r3, r3, #2
 8002002:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM2);
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a25      	ldr	r2, [pc, #148]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLM3);
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM4);
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002022:	f023 0310 	bic.w	r3, r3, #16
 8002026:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM5);
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 800202e:	f023 0320 	bic.w	r3, r3, #32
 8002032:	6053      	str	r3, [r2, #4]

	//AHB prescaler /2 84/2 = 42MHz
	AHB_PRE_SELECT(RCC_AHB_PRE_2);
 8002034:	2001      	movs	r0, #1
 8002036:	f7ff fd5b 	bl	8001af0 <AHB_PRE_SELECT>

	//APB1 prescaler /1  42MHz
	APB1_PRE_SELECT(RCC_APB1_PRE_1);
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff fe78 	bl	8001d30 <APB1_PRE_SELECT>

	//APB2 prescaler /1  42MHz
	APB2_PRE_SELECT(RCC_APB1_PRE_1);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fef3 	bl	8001e2c <APB2_PRE_SELECT>

	//enable the PLL clk
	set_bit(RCC->RCC_CR,PLLON);
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 800204c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002050:	6013      	str	r3, [r2, #0]

	//wait for PLL to be stable
	while (get_bit(RCC->RCC_CR,PLLRDY) == 0);
 8002052:	bf00      	nop
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0e5b      	lsrs	r3, r3, #25
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f8      	beq.n	8002054 <rcc_sys_init_pllp_42MHz_all+0x12c>

	//System clock switch >> HSI oscillator selected as system clock
	clr_bit(RCC->RCC_CFGR,SW0);
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6093      	str	r3, [r2, #8]
	set_bit(RCC->RCC_CFGR,SW1);
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6093      	str	r3, [r2, #8]

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b10 );
 800207a:	bf00      	nop
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	f003 0202 	and.w	r2, r3, #2
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <rcc_sys_init_pllp_42MHz_all+0x178>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	4313      	orrs	r3, r2
 8002094:	2b02      	cmp	r3, #2
 8002096:	d1f1      	bne.n	800207c <rcc_sys_init_pllp_42MHz_all+0x154>
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800

080020a4 <rcc_ahb1_clk_enable>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
}

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <rcc_ahb1_clk_enable+0x28>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	79fa      	ldrb	r2, [r7, #7]
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4611      	mov	r1, r2
 80020bc:	4a03      	ldr	r2, [pc, #12]	; (80020cc <rcc_ahb1_clk_enable+0x28>)
 80020be:	430b      	orrs	r3, r1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40023800 	.word	0x40023800

080020d0 <rcc_apb1_clk_enable>:
{
	set_bit(RCC->RCC_AHB3ENR, peripheral);
}

void rcc_apb1_clk_enable(rcc_apb1_peripherals peripheral)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_APB1ENR, peripheral);
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <rcc_apb1_clk_enable+0x28>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4611      	mov	r1, r2
 80020e8:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <rcc_apb1_clk_enable+0x28>)
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40023800 	.word	0x40023800

080020fc <usart_init>:
 */

#include "usart.h"

void usart_init(volatile usart_t* USARTx, uint32_t usart_clk, usart_parity_t parity, usart_stop_t stop_bit, uint32_t baud_rate)
{
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	460b      	mov	r3, r1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	4613      	mov	r3, r2
 8002110:	71bb      	strb	r3, [r7, #6]
	// Enable USART peripheral and clear OVER8 bit
	set_bit(USARTx->USART_CR1, UE);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	60da      	str	r2, [r3, #12]
	clr_bit(USARTx->USART_CR1, OVER8);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	60da      	str	r2, [r3, #12]

	// Configure parity based on parity variable
	if (parity == parity_disable)
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d106      	bne.n	800213e <usart_init+0x42>
	{
		// Disable parity control
		clr_bit(USARTx->USART_CR1, PCE);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e00f      	b.n	800215e <usart_init+0x62>
	}
	else if (parity == parity_enable)
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <usart_init+0x56>
	{
		// Enable parity control
		set_bit(USARTx->USART_CR1, PCE);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	e005      	b.n	800215e <usart_init+0x62>
	}
	else
	{
		// Disable parity control if parity variable has invalid value
		clr_bit(USARTx->USART_CR1, PCE);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	60da      	str	r2, [r3, #12]
	}

	// Configure number of stop bits based on stop_bit variable
	if (stop_bit == stop_bit_1)
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <usart_init+0x82>
	{
		// Configure one stop bit
		clr_bit(USARTx->USART_CR2, STOP0);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	611a      	str	r2, [r3, #16]
		clr_bit(USARTx->USART_CR2, STOP1);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	e01b      	b.n	80021b6 <usart_init+0xba>
	}
	else if (stop_bit == stop_bit_2)
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10c      	bne.n	800219e <usart_init+0xa2>
	{
		// Configure two stop bits
		clr_bit(USARTx->USART_CR2, STOP0);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	611a      	str	r2, [r3, #16]
		set_bit(USARTx->USART_CR2, STOP1);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	611a      	str	r2, [r3, #16]
 800219c:	e00b      	b.n	80021b6 <usart_init+0xba>
	}
	else
	{
		// Configure one stop bit if stop_bit variable has invalid value
		clr_bit(USARTx->USART_CR2, STOP0);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	611a      	str	r2, [r3, #16]
		clr_bit(USARTx->USART_CR2, STOP1);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	611a      	str	r2, [r3, #16]
	}

	// Calculate USART baud rate divisor and write it to USART_BRR register
	double usart_div = (double)((double)usart_clk/(double)(16*baud_rate));
 80021b6:	68b8      	ldr	r0, [r7, #8]
 80021b8:	f7fe f970 	bl	800049c <__aeabi_ui2d>
 80021bc:	4604      	mov	r4, r0
 80021be:	460d      	mov	r5, r1
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f969 	bl	800049c <__aeabi_ui2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4629      	mov	r1, r5
 80021d2:	f7fe fb07 	bl	80007e4 <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t usart_int_part = (uint32_t)((uint32_t)usart_div);
 80021de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021e2:	f7fe fbe7 	bl	80009b4 <__aeabi_d2uiz>
 80021e6:	4603      	mov	r3, r0
 80021e8:	617b      	str	r3, [r7, #20]
	uint32_t usart_fraction_part = (uint32_t)((double)((usart_div - usart_int_part)*16));
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7fe f956 	bl	800049c <__aeabi_ui2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021f8:	f7fe f812 	bl	8000220 <__aeabi_dsub>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <usart_init+0x150>)
 800220a:	f7fe f9c1 	bl	8000590 <__aeabi_dmul>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f7fe fbcd 	bl	80009b4 <__aeabi_d2uiz>
 800221a:	4603      	mov	r3, r0
 800221c:	613b      	str	r3, [r7, #16]

	USARTx->USART_BRR = ( (usart_int_part << 4) | usart_fraction_part);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	011a      	lsls	r2, r3, #4
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	431a      	orrs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	609a      	str	r2, [r3, #8]

	// Enable USART receiver and transmitter
	set_bit(USARTx->USART_CR1, RE);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	60da      	str	r2, [r3, #12]
	set_bit(USARTx->USART_CR1, TE);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f043 0208 	orr.w	r2, r3, #8
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	60da      	str	r2, [r3, #12]


}
 8002242:	bf00      	nop
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bdb0      	pop	{r4, r5, r7, pc}
 800224a:	bf00      	nop
 800224c:	40300000 	.word	0x40300000

08002250 <usart_read_byte>:
	usart_write_byte(USARTx, '\0');
}

// Read a single byte from the USART receiver buffer
char usart_read_byte (volatile usart_t* USARTx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	// Wait until receive buffer is not empty
	while (get_bit(USARTx->USART_SR, RXNE) == 0 );
 8002258:	bf00      	nop
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f8      	beq.n	800225a <usart_read_byte+0xa>

	// Return the received byte from the data register
	return USARTx->USART_DR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	b2db      	uxtb	r3, r3
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <usart_read_string>:

// Read a string from the USART receiver buffer
void usart_read_string(volatile usart_t* USARTx, char* buffer)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	// Read the first byte from the USART receiver buffer
	char temp = usart_read_byte(USARTx);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffe4 	bl	8002250 <usart_read_byte>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]

	// Loop until the end of the string is reached
	while (temp != '\r')
 800228c:	e00a      	b.n	80022a4 <usart_read_string+0x2c>
	{
		// Store the received byte in the buffer and increment the buffer pointer
		*buffer = temp;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	701a      	strb	r2, [r3, #0]
		buffer++;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	603b      	str	r3, [r7, #0]

		// Read the next byte from the USART receiver buffer
		temp = usart_read_byte(USARTx);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffd8 	bl	8002250 <usart_read_byte>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
	while (temp != '\r')
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b0d      	cmp	r3, #13
 80022a8:	d1f1      	bne.n	800228e <usart_read_string+0x16>
	}

	// Add a null terminator to the end of the buffer
	*buffer = '\0';
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <__libc_init_array>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	4d0d      	ldr	r5, [pc, #52]	; (80022f0 <__libc_init_array+0x38>)
 80022bc:	4c0d      	ldr	r4, [pc, #52]	; (80022f4 <__libc_init_array+0x3c>)
 80022be:	1b64      	subs	r4, r4, r5
 80022c0:	10a4      	asrs	r4, r4, #2
 80022c2:	2600      	movs	r6, #0
 80022c4:	42a6      	cmp	r6, r4
 80022c6:	d109      	bne.n	80022dc <__libc_init_array+0x24>
 80022c8:	4d0b      	ldr	r5, [pc, #44]	; (80022f8 <__libc_init_array+0x40>)
 80022ca:	4c0c      	ldr	r4, [pc, #48]	; (80022fc <__libc_init_array+0x44>)
 80022cc:	f000 f818 	bl	8002300 <_init>
 80022d0:	1b64      	subs	r4, r4, r5
 80022d2:	10a4      	asrs	r4, r4, #2
 80022d4:	2600      	movs	r6, #0
 80022d6:	42a6      	cmp	r6, r4
 80022d8:	d105      	bne.n	80022e6 <__libc_init_array+0x2e>
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e0:	4798      	blx	r3
 80022e2:	3601      	adds	r6, #1
 80022e4:	e7ee      	b.n	80022c4 <__libc_init_array+0xc>
 80022e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ea:	4798      	blx	r3
 80022ec:	3601      	adds	r6, #1
 80022ee:	e7f2      	b.n	80022d6 <__libc_init_array+0x1e>
 80022f0:	08002328 	.word	0x08002328
 80022f4:	08002328 	.word	0x08002328
 80022f8:	08002328 	.word	0x08002328
 80022fc:	0800232c 	.word	0x0800232c

08002300 <_init>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr

0800230c <_fini>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr
