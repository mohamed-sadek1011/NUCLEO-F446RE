
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800059c  080005a4  000105a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800059c  0800059c  000105a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800059c  0800059c  000105a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800059c  080005a4  000105a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005a4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005a4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000105a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000105ce  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000be1  00000000  00000000  00010611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000033a  00000000  00000000  000111f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f0  00000000  00000000  00011530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000aa  00000000  00000000  00011620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000231e  00000000  00000000  000116ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001206  00000000  00000000  000139e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000052e7  00000000  00000000  00014bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002b0  00000000  00000000  00019ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0001a188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000584 	.word	0x08000584

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000584 	.word	0x08000584

08000204 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
rcc_ahb1_clk_enable(RCC_GPIOA);
 8000208:	2000      	movs	r0, #0
 800020a:	f000 f981 	bl	8000510 <rcc_ahb1_clk_enable>
gpio_pin_mode(GPIOA, gpio_pin5, output_push_pull);
 800020e:	2200      	movs	r2, #0
 8000210:	2105      	movs	r1, #5
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0x2c>)
 8000214:	f000 f838 	bl	8000288 <gpio_pin_mode>
gpio_pin_pull(GPIOA, gpio_pin5, no_pull);
 8000218:	2200      	movs	r2, #0
 800021a:	2105      	movs	r1, #5
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <main+0x2c>)
 800021e:	f000 f8d5 	bl	80003cc <gpio_pin_pull>

gpio_pin_write(GPIOA, gpio_pin5, gpio_high);
 8000222:	2201      	movs	r2, #1
 8000224:	2105      	movs	r1, #5
 8000226:	4802      	ldr	r0, [pc, #8]	; (8000230 <main+0x2c>)
 8000228:	f000 f945 	bl	80004b6 <gpio_pin_write>
    /* Loop forever */
	while (1)
 800022c:	e7fe      	b.n	800022c <main+0x28>
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000238:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490d      	ldr	r1, [pc, #52]	; (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0a      	ldr	r4, [pc, #40]	; (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000262:	f000 f96b 	bl	800053c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f7ff ffcd 	bl	8000204 <main>

0800026a <LoopForever>:

LoopForever:
  b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000278:	080005a4 	.word	0x080005a4
  ldr r2, =_sbss
 800027c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000280:	2000001c 	.word	0x2000001c

08000284 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC_IRQHandler>
	...

08000288 <gpio_pin_mode>:
 */

#include "gpio.h"

void gpio_pin_mode(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_mode_t mode)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
 8000294:	4613      	mov	r3, r2
 8000296:	70bb      	strb	r3, [r7, #2]
	switch (mode)
 8000298:	78bb      	ldrb	r3, [r7, #2]
 800029a:	2b03      	cmp	r3, #3
 800029c:	d879      	bhi.n	8000392 <gpio_pin_mode+0x10a>
 800029e:	a201      	add	r2, pc, #4	; (adr r2, 80002a4 <gpio_pin_mode+0x1c>)
 80002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a4:	080002b5 	.word	0x080002b5
 80002a8:	080002f7 	.word	0x080002f7
 80002ac:	08000337 	.word	0x08000337
 80002b0:	08000367 	.word	0x08000367
	{
	case output_push_pull:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	78fa      	ldrb	r2, [r7, #3]
 80002ba:	0052      	lsls	r2, r2, #1
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	431a      	orrs	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	78fa      	ldrb	r2, [r7, #3]
 80002ce:	0052      	lsls	r2, r2, #1
 80002d0:	3201      	adds	r2, #1
 80002d2:	2101      	movs	r1, #1
 80002d4:	fa01 f202 	lsl.w	r2, r1, r2
 80002d8:	43d2      	mvns	r2, r2
 80002da:	401a      	ands	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
		//OT 0: Output push-pull
		clr_bit(GPIOx->GPIOx_OTYPER,pin);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	78fa      	ldrb	r2, [r7, #3]
 80002e6:	2101      	movs	r1, #1
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	43d2      	mvns	r2, r2
 80002ee:	401a      	ands	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
		break;
 80002f4:	e065      	b.n	80003c2 <gpio_pin_mode+0x13a>

	case output_open_drain:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	78fa      	ldrb	r2, [r7, #3]
 80002fc:	0052      	lsls	r2, r2, #1
 80002fe:	2101      	movs	r1, #1
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	431a      	orrs	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	78fa      	ldrb	r2, [r7, #3]
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	3201      	adds	r2, #1
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f202 	lsl.w	r2, r1, r2
 800031a:	43d2      	mvns	r2, r2
 800031c:	401a      	ands	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	601a      	str	r2, [r3, #0]
		//OT 1: Output open-drain
		set_bit(GPIOx->GPIOx_OTYPER,pin);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	78fa      	ldrb	r2, [r7, #3]
 8000328:	2101      	movs	r1, #1
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	431a      	orrs	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	605a      	str	r2, [r3, #4]
		break;
 8000334:	e045      	b.n	80003c2 <gpio_pin_mode+0x13a>

	case input:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	78fa      	ldrb	r2, [r7, #3]
 800033c:	0052      	lsls	r2, r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	43d2      	mvns	r2, r2
 8000346:	401a      	ands	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	78fa      	ldrb	r2, [r7, #3]
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	3201      	adds	r2, #1
 8000356:	2101      	movs	r1, #1
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	43d2      	mvns	r2, r2
 800035e:	401a      	ands	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	601a      	str	r2, [r3, #0]
		break;
 8000364:	e02d      	b.n	80003c2 <gpio_pin_mode+0x13a>

	case analog:
		//MODER 11: Analog mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	78fa      	ldrb	r2, [r7, #3]
 800036c:	0052      	lsls	r2, r2, #1
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	431a      	orrs	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	601a      	str	r2, [r3, #0]
		set_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	78fa      	ldrb	r2, [r7, #3]
 8000380:	0052      	lsls	r2, r2, #1
 8000382:	3201      	adds	r2, #1
 8000384:	2101      	movs	r1, #1
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	601a      	str	r2, [r3, #0]
		break;
 8000390:	e017      	b.n	80003c2 <gpio_pin_mode+0x13a>

	default:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	78fa      	ldrb	r2, [r7, #3]
 8000398:	0052      	lsls	r2, r2, #1
 800039a:	2101      	movs	r1, #1
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	43d2      	mvns	r2, r2
 80003a2:	401a      	ands	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	78fa      	ldrb	r2, [r7, #3]
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	3201      	adds	r2, #1
 80003b2:	2101      	movs	r1, #1
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	401a      	ands	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	601a      	str	r2, [r3, #0]
		break;
 80003c0:	bf00      	nop
	}
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <gpio_pin_pull>:

void gpio_pin_pull(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_pull_t pull)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
 80003d8:	4613      	mov	r3, r2
 80003da:	70bb      	strb	r3, [r7, #2]
	switch (pull)
 80003dc:	78bb      	ldrb	r3, [r7, #2]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d035      	beq.n	800044e <gpio_pin_pull+0x82>
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	dc4a      	bgt.n	800047c <gpio_pin_pull+0xb0>
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <gpio_pin_pull+0x24>
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d018      	beq.n	8000420 <gpio_pin_pull+0x54>
 80003ee:	e045      	b.n	800047c <gpio_pin_pull+0xb0>
	{
	case no_pull:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	68db      	ldr	r3, [r3, #12]
 80003f4:	78fa      	ldrb	r2, [r7, #3]
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	43d2      	mvns	r2, r2
 8000400:	401a      	ands	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	78fa      	ldrb	r2, [r7, #3]
 800040c:	0052      	lsls	r2, r2, #1
 800040e:	3201      	adds	r2, #1
 8000410:	2101      	movs	r1, #1
 8000412:	fa01 f202 	lsl.w	r2, r1, r2
 8000416:	43d2      	mvns	r2, r2
 8000418:	401a      	ands	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	60da      	str	r2, [r3, #12]
		break;
 800041e:	e045      	b.n	80004ac <gpio_pin_pull+0xe0>

	case pull_up:
		//PUPDR 01: Pull-up
		set_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	78fa      	ldrb	r2, [r7, #3]
 8000426:	0052      	lsls	r2, r2, #1
 8000428:	2101      	movs	r1, #1
 800042a:	fa01 f202 	lsl.w	r2, r1, r2
 800042e:	431a      	orrs	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	78fa      	ldrb	r2, [r7, #3]
 800043a:	0052      	lsls	r2, r2, #1
 800043c:	3201      	adds	r2, #1
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	401a      	ands	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	60da      	str	r2, [r3, #12]
		break;
 800044c:	e02e      	b.n	80004ac <gpio_pin_pull+0xe0>

	case pull_down:
		//PUPDR 10: Pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	78fa      	ldrb	r2, [r7, #3]
 8000454:	0052      	lsls	r2, r2, #1
 8000456:	2101      	movs	r1, #1
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
		set_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	78fa      	ldrb	r2, [r7, #3]
 800046a:	0052      	lsls	r2, r2, #1
 800046c:	3201      	adds	r2, #1
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f202 	lsl.w	r2, r1, r2
 8000474:	431a      	orrs	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	60da      	str	r2, [r3, #12]
		break;
 800047a:	e017      	b.n	80004ac <gpio_pin_pull+0xe0>

	default:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	78fa      	ldrb	r2, [r7, #3]
 8000482:	0052      	lsls	r2, r2, #1
 8000484:	2101      	movs	r1, #1
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	43d2      	mvns	r2, r2
 800048c:	401a      	ands	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	68db      	ldr	r3, [r3, #12]
 8000496:	78fa      	ldrb	r2, [r7, #3]
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	3201      	adds	r2, #1
 800049c:	2101      	movs	r1, #1
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	43d2      	mvns	r2, r2
 80004a4:	401a      	ands	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	60da      	str	r2, [r3, #12]
		break;
 80004aa:	bf00      	nop
	}
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <gpio_pin_write>:

void gpio_pin_write(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_level level)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	460b      	mov	r3, r1
 80004c0:	70fb      	strb	r3, [r7, #3]
 80004c2:	4613      	mov	r3, r2
 80004c4:	70bb      	strb	r3, [r7, #2]
	switch (level)
 80004c6:	78bb      	ldrb	r3, [r7, #2]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d002      	beq.n	80004d2 <gpio_pin_write+0x1c>
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d009      	beq.n	80004e4 <gpio_pin_write+0x2e>
 80004d0:	e010      	b.n	80004f4 <gpio_pin_write+0x3e>
	{
	case gpio_low:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<(pin+16));
 80004d2:	78fb      	ldrb	r3, [r7, #3]
 80004d4:	3310      	adds	r3, #16
 80004d6:	2201      	movs	r2, #1
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	619a      	str	r2, [r3, #24]
		break;
 80004e2:	e00f      	b.n	8000504 <gpio_pin_write+0x4e>

	case gpio_high:
		//BS 1: Sets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2201      	movs	r2, #1
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	619a      	str	r2, [r3, #24]
		break;
 80004f2:	e007      	b.n	8000504 <gpio_pin_write+0x4e>

	default:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 80004f4:	78fb      	ldrb	r3, [r7, #3]
 80004f6:	2201      	movs	r2, #1
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	619a      	str	r2, [r3, #24]
		break;
 8000502:	bf00      	nop
	}
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <rcc_ahb1_clk_enable>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
}

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <rcc_ahb1_clk_enable+0x28>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	2101      	movs	r1, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	4611      	mov	r1, r2
 8000528:	4a03      	ldr	r2, [pc, #12]	; (8000538 <rcc_ahb1_clk_enable+0x28>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40023800 	.word	0x40023800

0800053c <__libc_init_array>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	4d0d      	ldr	r5, [pc, #52]	; (8000574 <__libc_init_array+0x38>)
 8000540:	4c0d      	ldr	r4, [pc, #52]	; (8000578 <__libc_init_array+0x3c>)
 8000542:	1b64      	subs	r4, r4, r5
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	2600      	movs	r6, #0
 8000548:	42a6      	cmp	r6, r4
 800054a:	d109      	bne.n	8000560 <__libc_init_array+0x24>
 800054c:	4d0b      	ldr	r5, [pc, #44]	; (800057c <__libc_init_array+0x40>)
 800054e:	4c0c      	ldr	r4, [pc, #48]	; (8000580 <__libc_init_array+0x44>)
 8000550:	f000 f818 	bl	8000584 <_init>
 8000554:	1b64      	subs	r4, r4, r5
 8000556:	10a4      	asrs	r4, r4, #2
 8000558:	2600      	movs	r6, #0
 800055a:	42a6      	cmp	r6, r4
 800055c:	d105      	bne.n	800056a <__libc_init_array+0x2e>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f855 3b04 	ldr.w	r3, [r5], #4
 8000564:	4798      	blx	r3
 8000566:	3601      	adds	r6, #1
 8000568:	e7ee      	b.n	8000548 <__libc_init_array+0xc>
 800056a:	f855 3b04 	ldr.w	r3, [r5], #4
 800056e:	4798      	blx	r3
 8000570:	3601      	adds	r6, #1
 8000572:	e7f2      	b.n	800055a <__libc_init_array+0x1e>
 8000574:	0800059c 	.word	0x0800059c
 8000578:	0800059c 	.word	0x0800059c
 800057c:	0800059c 	.word	0x0800059c
 8000580:	080005a0 	.word	0x080005a0

08000584 <_init>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr

08000590 <_fini>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr
