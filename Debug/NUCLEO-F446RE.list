
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000af4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb8  08000cc0  00010cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb8  08000cb8  00010cc0  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb8  08000cb8  00010cc0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb8  08000cc0  00010cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cbc  08000cbc  00010cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000cc0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000cc0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010cc0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000148c  00000000  00000000  00010cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000438  00000000  00000000  00012176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  000125b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00012708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002558  00000000  00000000  00012818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017e8  00000000  00000000  00014d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000057e1  00000000  00000000  00016558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001bd39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000444  00000000  00000000  0001bd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ca0 	.word	0x08000ca0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000ca0 	.word	0x08000ca0

08000204 <main>:

#define cpu_SETENA (*(volatile uint32_t*)0xE000E100)


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	rcc_sys_init_pllp_42MHz_all();
 8000208:	f000 fbd2 	bl	80009b0 <rcc_sys_init_pllp_42MHz_all>
	rcc_ahb1_clk_enable(RCC_GPIOA);
 800020c:	2000      	movs	r0, #0
 800020e:	f000 fc8d 	bl	8000b2c <rcc_ahb1_clk_enable>
	rcc_apb1_clk_enable(RCC_TIM2);
 8000212:	2000      	movs	r0, #0
 8000214:	f000 fca0 	bl	8000b58 <rcc_apb1_clk_enable>

	set_bit(cpu_SETENA, 28);
 8000218:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <main+0x4c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <main+0x4c>)
 800021e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000222:	6013      	str	r3, [r2, #0]

	tim_gpt_2t5_ms_basic_with_interrupt_init(TIM2, 1000, 42);
 8000224:	222a      	movs	r2, #42	; 0x2a
 8000226:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800022a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800022e:	f000 fca9 	bl	8000b84 <tim_gpt_2t5_ms_basic_with_interrupt_init>

	gpio_pin_mode(GPIOA, gpio_pin5, output_push_pull);
 8000232:	2200      	movs	r2, #0
 8000234:	2105      	movs	r1, #5
 8000236:	4807      	ldr	r0, [pc, #28]	; (8000254 <main+0x50>)
 8000238:	f000 f85a 	bl	80002f0 <gpio_pin_mode>
	gpio_pin_pull(GPIOA, gpio_pin5, no_pull);
 800023c:	2200      	movs	r2, #0
 800023e:	2105      	movs	r1, #5
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <main+0x50>)
 8000242:	f000 f8f7 	bl	8000434 <gpio_pin_pull>

	tim_gpt_2t5_start(TIM2);
 8000246:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800024a:	f000 fcf1 	bl	8000c30 <tim_gpt_2t5_start>
	/* Loop forever */
	while (1)
 800024e:	e7fe      	b.n	800024e <main+0x4a>
 8000250:	e000e100 	.word	0xe000e100
 8000254:	40020000 	.word	0x40020000

08000258 <TIM2_IRQHandler>:

	}
}

void TIM2_IRQHandler (void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	gpio_pin_write(GPIOA, gpio_pin5, state);
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <TIM2_IRQHandler+0x3c>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	461a      	mov	r2, r3
 8000262:	2105      	movs	r1, #5
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <TIM2_IRQHandler+0x40>)
 8000266:	f000 f95a 	bl	800051e <gpio_pin_write>
	state = !state;
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <TIM2_IRQHandler+0x3c>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	bf0c      	ite	eq
 8000272:	2301      	moveq	r3, #1
 8000274:	2300      	movne	r3, #0
 8000276:	b2db      	uxtb	r3, r3
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <TIM2_IRQHandler+0x3c>)
 800027c:	701a      	strb	r2, [r3, #0]
	tim_exit_interrupt(TIM2);
 800027e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000282:	691b      	ldr	r3, [r3, #16]
 8000284:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000288:	f023 0301 	bic.w	r3, r3, #1
 800028c:	6113      	str	r3, [r2, #16]
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000001c 	.word	0x2000001c
 8000298:	40020000 	.word	0x40020000

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 fcc5 	bl	8000c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ff99 	bl	8000204 <main>

080002d2 <LoopForever>:

LoopForever:
  b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e0:	08000cc0 	.word	0x08000cc0
  ldr r2, =_sbss
 80002e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e8:	20000020 	.word	0x20000020

080002ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC_IRQHandler>
	...

080002f0 <gpio_pin_mode>:
 */

#include "gpio.h"

void gpio_pin_mode(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_mode_t mode)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70fb      	strb	r3, [r7, #3]
 80002fc:	4613      	mov	r3, r2
 80002fe:	70bb      	strb	r3, [r7, #2]
	switch (mode)
 8000300:	78bb      	ldrb	r3, [r7, #2]
 8000302:	2b03      	cmp	r3, #3
 8000304:	d879      	bhi.n	80003fa <gpio_pin_mode+0x10a>
 8000306:	a201      	add	r2, pc, #4	; (adr r2, 800030c <gpio_pin_mode+0x1c>)
 8000308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030c:	0800031d 	.word	0x0800031d
 8000310:	0800035f 	.word	0x0800035f
 8000314:	0800039f 	.word	0x0800039f
 8000318:	080003cf 	.word	0x080003cf
	{
	case output_push_pull:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	78fa      	ldrb	r2, [r7, #3]
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	2101      	movs	r1, #1
 8000326:	fa01 f202 	lsl.w	r2, r1, r2
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	78fa      	ldrb	r2, [r7, #3]
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	3201      	adds	r2, #1
 800033a:	2101      	movs	r1, #1
 800033c:	fa01 f202 	lsl.w	r2, r1, r2
 8000340:	43d2      	mvns	r2, r2
 8000342:	401a      	ands	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	601a      	str	r2, [r3, #0]
		//OT 0: Output push-pull
		clr_bit(GPIOx->GPIOx_OTYPER,pin);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	78fa      	ldrb	r2, [r7, #3]
 800034e:	2101      	movs	r1, #1
 8000350:	fa01 f202 	lsl.w	r2, r1, r2
 8000354:	43d2      	mvns	r2, r2
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	605a      	str	r2, [r3, #4]
		break;
 800035c:	e065      	b.n	800042a <gpio_pin_mode+0x13a>

	case output_open_drain:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	78fa      	ldrb	r2, [r7, #3]
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	2101      	movs	r1, #1
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	431a      	orrs	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	78fa      	ldrb	r2, [r7, #3]
 8000378:	0052      	lsls	r2, r2, #1
 800037a:	3201      	adds	r2, #1
 800037c:	2101      	movs	r1, #1
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	43d2      	mvns	r2, r2
 8000384:	401a      	ands	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	601a      	str	r2, [r3, #0]
		//OT 1: Output open-drain
		set_bit(GPIOx->GPIOx_OTYPER,pin);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	2101      	movs	r1, #1
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	431a      	orrs	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	605a      	str	r2, [r3, #4]
		break;
 800039c:	e045      	b.n	800042a <gpio_pin_mode+0x13a>

	case input:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	78fa      	ldrb	r2, [r7, #3]
 80003a4:	0052      	lsls	r2, r2, #1
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	43d2      	mvns	r2, r2
 80003ae:	401a      	ands	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	78fa      	ldrb	r2, [r7, #3]
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	3201      	adds	r2, #1
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	43d2      	mvns	r2, r2
 80003c6:	401a      	ands	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]
		break;
 80003cc:	e02d      	b.n	800042a <gpio_pin_mode+0x13a>

	case analog:
		//MODER 11: Analog mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	78fa      	ldrb	r2, [r7, #3]
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	2101      	movs	r1, #1
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]
		set_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	78fa      	ldrb	r2, [r7, #3]
 80003e8:	0052      	lsls	r2, r2, #1
 80003ea:	3201      	adds	r2, #1
 80003ec:	2101      	movs	r1, #1
 80003ee:	fa01 f202 	lsl.w	r2, r1, r2
 80003f2:	431a      	orrs	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	601a      	str	r2, [r3, #0]
		break;
 80003f8:	e017      	b.n	800042a <gpio_pin_mode+0x13a>

	default:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	78fa      	ldrb	r2, [r7, #3]
 8000400:	0052      	lsls	r2, r2, #1
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	43d2      	mvns	r2, r2
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	78fa      	ldrb	r2, [r7, #3]
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	3201      	adds	r2, #1
 800041a:	2101      	movs	r1, #1
 800041c:	fa01 f202 	lsl.w	r2, r1, r2
 8000420:	43d2      	mvns	r2, r2
 8000422:	401a      	ands	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	601a      	str	r2, [r3, #0]
		break;
 8000428:	bf00      	nop
	}
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <gpio_pin_pull>:

void gpio_pin_pull(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_pull_t pull)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	70fb      	strb	r3, [r7, #3]
 8000440:	4613      	mov	r3, r2
 8000442:	70bb      	strb	r3, [r7, #2]
	switch (pull)
 8000444:	78bb      	ldrb	r3, [r7, #2]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d035      	beq.n	80004b6 <gpio_pin_pull+0x82>
 800044a:	2b02      	cmp	r3, #2
 800044c:	dc4a      	bgt.n	80004e4 <gpio_pin_pull+0xb0>
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <gpio_pin_pull+0x24>
 8000452:	2b01      	cmp	r3, #1
 8000454:	d018      	beq.n	8000488 <gpio_pin_pull+0x54>
 8000456:	e045      	b.n	80004e4 <gpio_pin_pull+0xb0>
	{
	case no_pull:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	78fa      	ldrb	r2, [r7, #3]
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	2101      	movs	r1, #1
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	43d2      	mvns	r2, r2
 8000468:	401a      	ands	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	78fa      	ldrb	r2, [r7, #3]
 8000474:	0052      	lsls	r2, r2, #1
 8000476:	3201      	adds	r2, #1
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	43d2      	mvns	r2, r2
 8000480:	401a      	ands	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	60da      	str	r2, [r3, #12]
		break;
 8000486:	e045      	b.n	8000514 <gpio_pin_pull+0xe0>

	case pull_up:
		//PUPDR 01: Pull-up
		set_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	78fa      	ldrb	r2, [r7, #3]
 800048e:	0052      	lsls	r2, r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	fa01 f202 	lsl.w	r2, r1, r2
 8000496:	431a      	orrs	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	78fa      	ldrb	r2, [r7, #3]
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	3201      	adds	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	43d2      	mvns	r2, r2
 80004ae:	401a      	ands	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	60da      	str	r2, [r3, #12]
		break;
 80004b4:	e02e      	b.n	8000514 <gpio_pin_pull+0xe0>

	case pull_down:
		//PUPDR 10: Pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	78fa      	ldrb	r2, [r7, #3]
 80004bc:	0052      	lsls	r2, r2, #1
 80004be:	2101      	movs	r1, #1
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	43d2      	mvns	r2, r2
 80004c6:	401a      	ands	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	60da      	str	r2, [r3, #12]
		set_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	78fa      	ldrb	r2, [r7, #3]
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	3201      	adds	r2, #1
 80004d6:	2101      	movs	r1, #1
 80004d8:	fa01 f202 	lsl.w	r2, r1, r2
 80004dc:	431a      	orrs	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	60da      	str	r2, [r3, #12]
		break;
 80004e2:	e017      	b.n	8000514 <gpio_pin_pull+0xe0>

	default:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	78fa      	ldrb	r2, [r7, #3]
 80004ea:	0052      	lsls	r2, r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	401a      	ands	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	78fa      	ldrb	r2, [r7, #3]
 8000500:	0052      	lsls	r2, r2, #1
 8000502:	3201      	adds	r2, #1
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	43d2      	mvns	r2, r2
 800050c:	401a      	ands	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	60da      	str	r2, [r3, #12]
		break;
 8000512:	bf00      	nop
	}
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <gpio_pin_write>:

void gpio_pin_write(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_level level)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	460b      	mov	r3, r1
 8000528:	70fb      	strb	r3, [r7, #3]
 800052a:	4613      	mov	r3, r2
 800052c:	70bb      	strb	r3, [r7, #2]
	switch (level)
 800052e:	78bb      	ldrb	r3, [r7, #2]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <gpio_pin_write+0x1c>
 8000534:	2b01      	cmp	r3, #1
 8000536:	d009      	beq.n	800054c <gpio_pin_write+0x2e>
 8000538:	e010      	b.n	800055c <gpio_pin_write+0x3e>
	{
	case gpio_low:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<(pin+16));
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	3310      	adds	r3, #16
 800053e:	2201      	movs	r2, #1
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	461a      	mov	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	619a      	str	r2, [r3, #24]
		break;
 800054a:	e00f      	b.n	800056c <gpio_pin_write+0x4e>

	case gpio_high:
		//BS 1: Sets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	2201      	movs	r2, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	461a      	mov	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	619a      	str	r2, [r3, #24]
		break;
 800055a:	e007      	b.n	800056c <gpio_pin_write+0x4e>

	default:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	2201      	movs	r2, #1
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	619a      	str	r2, [r3, #24]
		break;
 800056a:	bf00      	nop
	}
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <AHB_PRE_SELECT>:
 *      Author: moham
 */
#include "rcc.h"

static void AHB_PRE_SELECT (rcc_ahb_pre_t AHB_PRE)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	switch (AHB_PRE)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b08      	cmp	r3, #8
 8000586:	f200 80f6 	bhi.w	8000776 <AHB_PRE_SELECT+0x1fe>
 800058a:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <AHB_PRE_SELECT+0x18>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005b5 	.word	0x080005b5
 8000594:	080005e7 	.word	0x080005e7
 8000598:	08000619 	.word	0x08000619
 800059c:	0800064b 	.word	0x0800064b
 80005a0:	0800067d 	.word	0x0800067d
 80005a4:	080006af 	.word	0x080006af
 80005a8:	080006e1 	.word	0x080006e1
 80005ac:	08000713 	.word	0x08000713
 80005b0:	08000745 	.word	0x08000745
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80005b4:	4b7f      	ldr	r3, [pc, #508]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	4a7e      	ldr	r2, [pc, #504]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005ba:	f023 0310 	bic.w	r3, r3, #16
 80005be:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80005c0:	4b7c      	ldr	r3, [pc, #496]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	4a7b      	ldr	r2, [pc, #492]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005c6:	f023 0320 	bic.w	r3, r3, #32
 80005ca:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80005cc:	4b79      	ldr	r3, [pc, #484]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4a78      	ldr	r2, [pc, #480]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005d6:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 80005d8:	4b76      	ldr	r3, [pc, #472]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	4a75      	ldr	r2, [pc, #468]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005e2:	6093      	str	r3, [r2, #8]
		break;
 80005e4:	e0e0      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80005e6:	4b73      	ldr	r3, [pc, #460]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	4a72      	ldr	r2, [pc, #456]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005ec:	f023 0310 	bic.w	r3, r3, #16
 80005f0:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80005f2:	4b70      	ldr	r3, [pc, #448]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	4a6f      	ldr	r2, [pc, #444]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80005f8:	f023 0320 	bic.w	r3, r3, #32
 80005fc:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80005fe:	4b6d      	ldr	r3, [pc, #436]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4a6c      	ldr	r2, [pc, #432]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000608:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800060a:	4b6a      	ldr	r3, [pc, #424]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	4a69      	ldr	r2, [pc, #420]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6093      	str	r3, [r2, #8]
		break;
 8000616:	e0c7      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000618:	4b66      	ldr	r3, [pc, #408]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	4a65      	ldr	r2, [pc, #404]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000624:	4b63      	ldr	r3, [pc, #396]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	4a62      	ldr	r2, [pc, #392]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800062a:	f023 0320 	bic.w	r3, r3, #32
 800062e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8000630:	4b60      	ldr	r3, [pc, #384]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	4a5f      	ldr	r2, [pc, #380]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800063a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800063c:	4b5d      	ldr	r3, [pc, #372]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	4a5c      	ldr	r2, [pc, #368]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000646:	6093      	str	r3, [r2, #8]
		break;
 8000648:	e0ae      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 800064a:	4b5a      	ldr	r3, [pc, #360]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a59      	ldr	r2, [pc, #356]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000650:	f023 0310 	bic.w	r3, r3, #16
 8000654:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8000656:	4b57      	ldr	r3, [pc, #348]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	4a56      	ldr	r2, [pc, #344]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8000662:	4b54      	ldr	r3, [pc, #336]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4a53      	ldr	r2, [pc, #332]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800066c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800066e:	4b51      	ldr	r3, [pc, #324]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	4a50      	ldr	r2, [pc, #320]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	6093      	str	r3, [r2, #8]
		break;
 800067a:	e095      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,HPRE0);
 800067c:	4b4d      	ldr	r3, [pc, #308]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8000688:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	4a49      	ldr	r2, [pc, #292]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800068e:	f043 0320 	orr.w	r3, r3, #32
 8000692:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 8000694:	4b47      	ldr	r3, [pc, #284]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	4a46      	ldr	r2, [pc, #280]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800069a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800069e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80006a0:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a43      	ldr	r2, [pc, #268]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006aa:	6093      	str	r3, [r2, #8]
		break;
 80006ac:	e07c      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_64:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80006ae:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	4a40      	ldr	r2, [pc, #256]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006b4:	f023 0310 	bic.w	r3, r3, #16
 80006b8:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80006ba:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	4a3d      	ldr	r2, [pc, #244]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006c0:	f023 0320 	bic.w	r3, r3, #32
 80006c4:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 80006c6:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	4a3a      	ldr	r2, [pc, #232]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80006d2:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4a37      	ldr	r2, [pc, #220]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6093      	str	r3, [r2, #8]
		break;
 80006de:	e063      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_128:
		set_bit(RCC->RCC_CFGR,HPRE0);
 80006e0:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	4a33      	ldr	r2, [pc, #204]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006f2:	f023 0320 	bic.w	r3, r3, #32
 80006f6:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80006fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000702:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4a2a      	ldr	r2, [pc, #168]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800070a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070e:	6093      	str	r3, [r2, #8]
		break;
 8000710:	e04a      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_256:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000712:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000718:	f023 0310 	bic.w	r3, r3, #16
 800071c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000734:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6093      	str	r3, [r2, #8]
		break;
 8000742:	e031      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_512:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000766:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800076e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000772:	6093      	str	r3, [r2, #8]
		break;
 8000774:	e018      	b.n	80007a8 <AHB_PRE_SELECT+0x230>
	default:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800077c:	f023 0310 	bic.w	r3, r3, #16
 8000780:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000788:	f023 0320 	bic.w	r3, r3, #32
 800078c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 8000794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000798:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <AHB_PRE_SELECT+0x23c>)
 80007a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007a4:	6093      	str	r3, [r2, #8]
		break;
 80007a6:	bf00      	nop
	}
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <APB1_PRE_SELECT>:

static void APB1_PRE_SELECT (rcc_ahb_pre_t APB1_PRE)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	switch (APB1_PRE)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d86c      	bhi.n	80008a2 <APB1_PRE_SELECT+0xea>
 80007c8:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <APB1_PRE_SELECT+0x18>)
 80007ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ce:	bf00      	nop
 80007d0:	080007e5 	.word	0x080007e5
 80007d4:	0800080b 	.word	0x0800080b
 80007d8:	08000831 	.word	0x08000831
 80007dc:	08000857 	.word	0x08000857
 80007e0:	0800087d 	.word	0x0800087d
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 80007e4:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 80007ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80007ee:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 80007f0:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a2e      	ldr	r2, [pc, #184]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 80007f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007fa:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE12);
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000806:	6093      	str	r3, [r2, #8]
		break;
 8000808:	e04c      	b.n	80008a4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000810:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000814:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800081c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000820:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800082c:	6093      	str	r3, [r2, #8]
		break;
 800082e:	e039      	b.n	80008a4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000846:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800084e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000852:	6093      	str	r3, [r2, #8]
		break;
 8000854:	e026      	b.n	80008a4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800085c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000860:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800086c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000878:	6093      	str	r3, [r2, #8]
		break;
 800087a:	e013      	b.n	80008a4 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE10);
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000886:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800088e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000892:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <APB1_PRE_SELECT+0xf8>)
 800089a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800089e:	6093      	str	r3, [r2, #8]
		break;
 80008a0:	e000      	b.n	80008a4 <APB1_PRE_SELECT+0xec>
	default:
		break;
 80008a2:	bf00      	nop
	}
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800

080008b4 <APB2_PRE_SELECT>:

static void APB2_PRE_SELECT (rcc_ahb_pre_t APB2_PRE)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	switch (APB2_PRE)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d86c      	bhi.n	800099e <APB2_PRE_SELECT+0xea>
 80008c4:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <APB2_PRE_SELECT+0x18>)
 80008c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ca:	bf00      	nop
 80008cc:	080008e1 	.word	0x080008e1
 80008d0:	08000907 	.word	0x08000907
 80008d4:	0800092d 	.word	0x0800092d
 80008d8:	08000953 	.word	0x08000953
 80008dc:	08000979 	.word	0x08000979
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 80008e0:	4b32      	ldr	r3, [pc, #200]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	4a31      	ldr	r2, [pc, #196]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 80008e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008ea:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	4a2e      	ldr	r2, [pc, #184]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 80008f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008f6:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE22);
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 80008fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000902:	6093      	str	r3, [r2, #8]
		break;
 8000904:	e04c      	b.n	80009a0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	4a28      	ldr	r2, [pc, #160]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800090c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000910:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	4a25      	ldr	r2, [pc, #148]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800091c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000928:	6093      	str	r3, [r2, #8]
		break;
 800092a:	e039      	b.n	80009a0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE20);
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000932:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000936:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800093e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000942:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800094a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094e:	6093      	str	r3, [r2, #8]
		break;
 8000950:	e026      	b.n	80009a0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800095c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000974:	6093      	str	r3, [r2, #8]
		break;
 8000976:	e013      	b.n	80009a0 <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800097e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000982:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <APB2_PRE_SELECT+0xf8>)
 8000996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800099a:	6093      	str	r3, [r2, #8]
		break;
 800099c:	e000      	b.n	80009a0 <APB2_PRE_SELECT+0xec>
	default:
		break;
 800099e:	bf00      	nop
	}
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <rcc_sys_init_pllp_42MHz_all>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b01 );
}

void rcc_sys_init_pllp_42MHz_all(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

	//• f(VCO clock) = f(PLL clock input) × (PLLN / PLLM) >> 16M × (84 / 8) = 168M
	//• f(PLL general clock output) = f(VCO clock) / PLLP >> 168 / 2 = 84

	//HSI_as_source
	clr_bit(RCC->RCC_PLLCFGR,PLLSRC);
 80009b4:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	4a5b      	ldr	r2, [pc, #364]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009be:	6053      	str	r3, [r2, #4]

	//Q = 4 >> 0b0100
	clr_bit(RCC->RCC_PLLCFGR,PLLQ0);
 80009c0:	4b59      	ldr	r3, [pc, #356]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4a58      	ldr	r2, [pc, #352]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009ca:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ1);
 80009cc:	4b56      	ldr	r3, [pc, #344]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4a55      	ldr	r2, [pc, #340]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80009d6:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLQ2);
 80009d8:	4b53      	ldr	r3, [pc, #332]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009e2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ3);
 80009e4:	4b50      	ldr	r3, [pc, #320]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	4a4f      	ldr	r2, [pc, #316]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009ea:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80009ee:	6053      	str	r3, [r2, #4]

	//P = 2 >> 0b00
	clr_bit(RCC->RCC_PLLCFGR,PLLP0);
 80009f0:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a4c      	ldr	r2, [pc, #304]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fa:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLP1);
 80009fc:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a02:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a06:	6053      	str	r3, [r2, #4]

	//N = 84 >> 0b001010100
	clr_bit(RCC->RCC_PLLCFGR,PLLN0);
 8000a08:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a12:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN1);
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a1e:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN2);
 8000a20:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a40      	ldr	r2, [pc, #256]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN3);
 8000a2c:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a36:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN4);
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a42:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN5);
 8000a44:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a37      	ldr	r2, [pc, #220]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a4e:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN6);
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	4a34      	ldr	r2, [pc, #208]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN7);
 8000a5c:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a66:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN8);
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a72:	6053      	str	r3, [r2, #4]

	//M = 8 >> 0b01000
	clr_bit(RCC->RCC_PLLCFGR,PLLM0);
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a7a:	f023 0301 	bic.w	r3, r3, #1
 8000a7e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM1);
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a86:	f023 0302 	bic.w	r3, r3, #2
 8000a8a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM2);
 8000a8c:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	4a25      	ldr	r2, [pc, #148]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a92:	f023 0304 	bic.w	r3, r3, #4
 8000a96:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLM3);
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM4);
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aaa:	f023 0310 	bic.w	r3, r3, #16
 8000aae:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM5);
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ab6:	f023 0320 	bic.w	r3, r3, #32
 8000aba:	6053      	str	r3, [r2, #4]

	//AHB prescaler /2 84/2 = 42MHz
	AHB_PRE_SELECT(RCC_AHB_PRE_2);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fd5b 	bl	8000578 <AHB_PRE_SELECT>

	//APB1 prescaler /1  42MHz
	APB1_PRE_SELECT(RCC_APB1_PRE_1);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fe78 	bl	80007b8 <APB1_PRE_SELECT>

	//APB2 prescaler /1  42MHz
	APB2_PRE_SELECT(RCC_APB1_PRE_1);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff fef3 	bl	80008b4 <APB2_PRE_SELECT>

	//enable the PLL clk
	set_bit(RCC->RCC_CR,PLLON);
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ad8:	6013      	str	r3, [r2, #0]

	//wait for PLL to be stable
	while (get_bit(RCC->RCC_CR,PLLRDY) == 0);
 8000ada:	bf00      	nop
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	0e5b      	lsrs	r3, r3, #25
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f8      	beq.n	8000adc <rcc_sys_init_pllp_42MHz_all+0x12c>

	//System clock switch >> HSI oscillator selected as system clock
	clr_bit(RCC->RCC_CFGR,SW0);
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000af0:	f023 0301 	bic.w	r3, r3, #1
 8000af4:	6093      	str	r3, [r2, #8]
	set_bit(RCC->RCC_CFGR,SW1);
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6093      	str	r3, [r2, #8]

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b10 );
 8000b02:	bf00      	nop
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	f003 0202 	and.w	r2, r3, #2
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d1f1      	bne.n	8000b04 <rcc_sys_init_pllp_42MHz_all+0x154>
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <rcc_ahb1_clk_enable>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
}

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <rcc_ahb1_clk_enable+0x28>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	79fa      	ldrb	r2, [r7, #7]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	4611      	mov	r1, r2
 8000b44:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <rcc_ahb1_clk_enable+0x28>)
 8000b46:	430b      	orrs	r3, r1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800

08000b58 <rcc_apb1_clk_enable>:
{
	set_bit(RCC->RCC_AHB3ENR, peripheral);
}

void rcc_apb1_clk_enable(rcc_apb1_peripherals peripheral)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_APB1ENR, peripheral);
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <rcc_apb1_clk_enable+0x28>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <rcc_apb1_clk_enable+0x28>)
 8000b72:	430b      	orrs	r3, r1
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40023800 	.word	0x40023800

08000b84 <tim_gpt_2t5_ms_basic_with_interrupt_init>:

	else;
}

void tim_gpt_2t5_ms_basic_with_interrupt_init(volatile tim_2t5_t* tim, uint32_t event_tick_ms, uint16_t tim_clk_mhz)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	80fb      	strh	r3, [r7, #6]
	if ((event_tick_ms > 2) && (event_tick_ms < 32767))
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d946      	bls.n	8000c26 <tim_gpt_2t5_ms_basic_with_interrupt_init+0xa2>
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d841      	bhi.n	8000c26 <tim_gpt_2t5_ms_basic_with_interrupt_init+0xa2>
	{
		//Counter disabled
		clr_bit(tim->TIMx_CR1, CEN);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f023 0201 	bic.w	r2, r3, #1
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	601a      	str	r2, [r3, #0]

		tim->TIMx_PSC = (tim_clk_mhz*500);
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
		tim->TIMx_ARR = (event_tick_ms*2);
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	005a      	lsls	r2, r3, #1
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c

		//TIMx_ARR register is buffered
		set_bit(tim->TIMx_CR1, ARPE);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]

		//Center-aligned mode selection >> Edge-aligned mode
		clr_bit(tim->TIMx_CR1, CMS0);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f023 0220 	bic.w	r2, r3, #32
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	601a      	str	r2, [r3, #0]
		clr_bit(tim->TIMx_CR1, CMS1);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	601a      	str	r2, [r3, #0]

		//Counter used as down-counter
		set_bit(tim->TIMx_CR1, DIR);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f043 0210 	orr.w	r2, r3, #16
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]

		//Counter is not stopped at update event
		clr_bit(tim->TIMx_CR1, OPM);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f023 0208 	bic.w	r2, r3, #8
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	601a      	str	r2, [r3, #0]

		//Only counter overflow/underflow generates an update interrupt or DMA request.
		set_bit(tim->TIMx_CR1, URS);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f043 0204 	orr.w	r2, r3, #4
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	601a      	str	r2, [r3, #0]

		//The Update (UEV) event is enabled
		clr_bit(tim->TIMx_CR1, UDIS);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 0202 	bic.w	r2, r3, #2
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	601a      	str	r2, [r3, #0]

		//Update interrupt enable
		set_bit(tim->TIMx_DIER, UIE);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	f043 0201 	orr.w	r2, r3, #1
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	60da      	str	r2, [r3, #12]
	}

	else;
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <tim_gpt_2t5_start>:

void tim_gpt_2t5_start(volatile tim_2t5_t* tim)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	//reset counter
	tim->TIMx_CNT = tim->TIMx_ARR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

	//Counter enabled
	set_bit(tim->TIMx_CR1, CEN);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f043 0201 	orr.w	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
	...

08000c58 <__libc_init_array>:
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	4d0d      	ldr	r5, [pc, #52]	; (8000c90 <__libc_init_array+0x38>)
 8000c5c:	4c0d      	ldr	r4, [pc, #52]	; (8000c94 <__libc_init_array+0x3c>)
 8000c5e:	1b64      	subs	r4, r4, r5
 8000c60:	10a4      	asrs	r4, r4, #2
 8000c62:	2600      	movs	r6, #0
 8000c64:	42a6      	cmp	r6, r4
 8000c66:	d109      	bne.n	8000c7c <__libc_init_array+0x24>
 8000c68:	4d0b      	ldr	r5, [pc, #44]	; (8000c98 <__libc_init_array+0x40>)
 8000c6a:	4c0c      	ldr	r4, [pc, #48]	; (8000c9c <__libc_init_array+0x44>)
 8000c6c:	f000 f818 	bl	8000ca0 <_init>
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	10a4      	asrs	r4, r4, #2
 8000c74:	2600      	movs	r6, #0
 8000c76:	42a6      	cmp	r6, r4
 8000c78:	d105      	bne.n	8000c86 <__libc_init_array+0x2e>
 8000c7a:	bd70      	pop	{r4, r5, r6, pc}
 8000c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c80:	4798      	blx	r3
 8000c82:	3601      	adds	r6, #1
 8000c84:	e7ee      	b.n	8000c64 <__libc_init_array+0xc>
 8000c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8a:	4798      	blx	r3
 8000c8c:	3601      	adds	r6, #1
 8000c8e:	e7f2      	b.n	8000c76 <__libc_init_array+0x1e>
 8000c90:	08000cb8 	.word	0x08000cb8
 8000c94:	08000cb8 	.word	0x08000cb8
 8000c98:	08000cb8 	.word	0x08000cb8
 8000c9c:	08000cbc 	.word	0x08000cbc

08000ca0 <_init>:
 8000ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca2:	bf00      	nop
 8000ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca6:	bc08      	pop	{r3}
 8000ca8:	469e      	mov	lr, r3
 8000caa:	4770      	bx	lr

08000cac <_fini>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	bf00      	nop
 8000cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb2:	bc08      	pop	{r3}
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	4770      	bx	lr
