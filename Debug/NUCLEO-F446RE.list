
NUCLEO-F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d98  08000da0  00010da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d98  08000d98  00010da0  2**0
                  CONTENTS
  4 .ARM          00000000  08000d98  08000d98  00010da0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d98  08000da0  00010da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d98  08000d98  00010d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d9c  08000d9c  00010d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010da0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000da0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000da0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015e4  00000000  00000000  00010dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004b6  00000000  00000000  000123ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00012868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  000129a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002571  00000000  00000000  00012aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017e5  00000000  00000000  00015011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000582d  00000000  00000000  000167f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d0  00000000  00000000  0001c074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d80 	.word	0x08000d80

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000d80 	.word	0x08000d80

08000204 <main>:

#define cpu_SETENA (*(volatile uint32_t*)0xE000E100)


int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	rcc_sys_init_pllp_42MHz_all();
 800020a:	f000 fbdf 	bl	80009cc <rcc_sys_init_pllp_42MHz_all>
	rcc_ahb1_clk_enable(RCC_GPIOA);
 800020e:	2000      	movs	r0, #0
 8000210:	f000 fc9a 	bl	8000b48 <rcc_ahb1_clk_enable>
	rcc_apb1_clk_enable(RCC_TIM3);
 8000214:	2001      	movs	r0, #1
 8000216:	f000 fcad 	bl	8000b74 <rcc_apb1_clk_enable>

	set_bit(cpu_SETENA, 29);
 800021a:	4b13      	ldr	r3, [pc, #76]	; (8000268 <main+0x64>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a12      	ldr	r2, [pc, #72]	; (8000268 <main+0x64>)
 8000220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000224:	6013      	str	r3, [r2, #0]

	tim_t tim;

	tim.n = TIM3;
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <main+0x68>)
 8000228:	607b      	str	r3, [r7, #4]
	tim.config.event_tick = 1000;
 800022a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022e:	817b      	strh	r3, [r7, #10]
	tim.config.unit = tim_ms;
 8000230:	2301      	movs	r3, #1
 8000232:	733b      	strb	r3, [r7, #12]
	tim.config.mode = tim_basic;
 8000234:	2300      	movs	r3, #0
 8000236:	723b      	strb	r3, [r7, #8]
	tim.config.tim_clk_mhz = 42;
 8000238:	232a      	movs	r3, #42	; 0x2a
 800023a:	727b      	strb	r3, [r7, #9]
	tim.config.update_int = tim_update_interrupt_enable;
 800023c:	2301      	movs	r3, #1
 800023e:	737b      	strb	r3, [r7, #13]

	tim_init(&tim);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fcac 	bl	8000ba0 <tim_init>

	//tim_gpt_2t5_ms_basic_with_interrupt_init(TIM2, 1000, 42);


	gpio_pin_mode(GPIOA, gpio_pin5, output_push_pull);
 8000248:	2200      	movs	r2, #0
 800024a:	2105      	movs	r1, #5
 800024c:	4808      	ldr	r0, [pc, #32]	; (8000270 <main+0x6c>)
 800024e:	f000 f85d 	bl	800030c <gpio_pin_mode>
	gpio_pin_pull(GPIOA, gpio_pin5, no_pull);
 8000252:	2200      	movs	r2, #0
 8000254:	2105      	movs	r1, #5
 8000256:	4806      	ldr	r0, [pc, #24]	; (8000270 <main+0x6c>)
 8000258:	f000 f8fa 	bl	8000450 <gpio_pin_pull>

	//tim_gpt_2t5_start(TIM2);

	tim_start(&tim);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fd58 	bl	8000d14 <tim_start>

	/* Loop forever */
	while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x60>
 8000266:	bf00      	nop
 8000268:	e000e100 	.word	0xe000e100
 800026c:	40000400 	.word	0x40000400
 8000270:	40020000 	.word	0x40020000

08000274 <TIM3_IRQHandler>:

	}
}

void TIM3_IRQHandler (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	gpio_pin_write(GPIOA, gpio_pin5, state);
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <TIM3_IRQHandler+0x38>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	461a      	mov	r2, r3
 800027e:	2105      	movs	r1, #5
 8000280:	480b      	ldr	r0, [pc, #44]	; (80002b0 <TIM3_IRQHandler+0x3c>)
 8000282:	f000 f95a 	bl	800053a <gpio_pin_write>
	state = !state;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <TIM3_IRQHandler+0x38>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	bf0c      	ite	eq
 800028e:	2301      	moveq	r3, #1
 8000290:	2300      	movne	r3, #0
 8000292:	b2db      	uxtb	r3, r3
 8000294:	461a      	mov	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <TIM3_IRQHandler+0x38>)
 8000298:	701a      	strb	r2, [r3, #0]
	tim_exit_interrupt(TIM3);
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <TIM3_IRQHandler+0x40>)
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <TIM3_IRQHandler+0x40>)
 80002a0:	f023 0301 	bic.w	r3, r3, #1
 80002a4:	6113      	str	r3, [r2, #16]
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000001c 	.word	0x2000001c
 80002b0:	40020000 	.word	0x40020000
 80002b4:	40000400 	.word	0x40000400

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 fd27 	bl	8000d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff8b 	bl	8000204 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000da0 	.word	0x08000da0
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	20000020 	.word	0x20000020

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <gpio_pin_mode>:
 */

#include "gpio.h"

void gpio_pin_mode(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_mode_t mode)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
 8000318:	4613      	mov	r3, r2
 800031a:	70bb      	strb	r3, [r7, #2]
	switch (mode)
 800031c:	78bb      	ldrb	r3, [r7, #2]
 800031e:	2b03      	cmp	r3, #3
 8000320:	d879      	bhi.n	8000416 <gpio_pin_mode+0x10a>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <gpio_pin_mode+0x1c>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	08000339 	.word	0x08000339
 800032c:	0800037b 	.word	0x0800037b
 8000330:	080003bb 	.word	0x080003bb
 8000334:	080003eb 	.word	0x080003eb
	{
	case output_push_pull:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	78fa      	ldrb	r2, [r7, #3]
 800033e:	0052      	lsls	r2, r2, #1
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	431a      	orrs	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	78fa      	ldrb	r2, [r7, #3]
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	3201      	adds	r2, #1
 8000356:	2101      	movs	r1, #1
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	43d2      	mvns	r2, r2
 800035e:	401a      	ands	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	601a      	str	r2, [r3, #0]
		//OT 0: Output push-pull
		clr_bit(GPIOx->GPIOx_OTYPER,pin);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	78fa      	ldrb	r2, [r7, #3]
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	43d2      	mvns	r2, r2
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	605a      	str	r2, [r3, #4]
		break;
 8000378:	e065      	b.n	8000446 <gpio_pin_mode+0x13a>

	case output_open_drain:
		//MODER 01: General purpose output mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	78fa      	ldrb	r2, [r7, #3]
 8000380:	0052      	lsls	r2, r2, #1
 8000382:	2101      	movs	r1, #1
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	431a      	orrs	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	78fa      	ldrb	r2, [r7, #3]
 8000394:	0052      	lsls	r2, r2, #1
 8000396:	3201      	adds	r2, #1
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	43d2      	mvns	r2, r2
 80003a0:	401a      	ands	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	601a      	str	r2, [r3, #0]
		//OT 1: Output open-drain
		set_bit(GPIOx->GPIOx_OTYPER,pin);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	78fa      	ldrb	r2, [r7, #3]
 80003ac:	2101      	movs	r1, #1
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	605a      	str	r2, [r3, #4]
		break;
 80003b8:	e045      	b.n	8000446 <gpio_pin_mode+0x13a>

	case input:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	78fa      	ldrb	r2, [r7, #3]
 80003c0:	0052      	lsls	r2, r2, #1
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	401a      	ands	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	78fa      	ldrb	r2, [r7, #3]
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	3201      	adds	r2, #1
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	43d2      	mvns	r2, r2
 80003e2:	401a      	ands	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	601a      	str	r2, [r3, #0]
		break;
 80003e8:	e02d      	b.n	8000446 <gpio_pin_mode+0x13a>

	case analog:
		//MODER 11: Analog mode
		set_bit(GPIOx->GPIOx_MODER, (pin*2));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	78fa      	ldrb	r2, [r7, #3]
 80003f0:	0052      	lsls	r2, r2, #1
 80003f2:	2101      	movs	r1, #1
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	431a      	orrs	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	601a      	str	r2, [r3, #0]
		set_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	78fa      	ldrb	r2, [r7, #3]
 8000404:	0052      	lsls	r2, r2, #1
 8000406:	3201      	adds	r2, #1
 8000408:	2101      	movs	r1, #1
 800040a:	fa01 f202 	lsl.w	r2, r1, r2
 800040e:	431a      	orrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
		break;
 8000414:	e017      	b.n	8000446 <gpio_pin_mode+0x13a>

	default:
		//MODER 00: Input
		clr_bit(GPIOx->GPIOx_MODER, (pin*2));
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	78fa      	ldrb	r2, [r7, #3]
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	43d2      	mvns	r2, r2
 8000426:	401a      	ands	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	601a      	str	r2, [r3, #0]
		clr_bit(GPIOx->GPIOx_MODER, ((pin*2)+1));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	78fa      	ldrb	r2, [r7, #3]
 8000432:	0052      	lsls	r2, r2, #1
 8000434:	3201      	adds	r2, #1
 8000436:	2101      	movs	r1, #1
 8000438:	fa01 f202 	lsl.w	r2, r1, r2
 800043c:	43d2      	mvns	r2, r2
 800043e:	401a      	ands	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	601a      	str	r2, [r3, #0]
		break;
 8000444:	bf00      	nop
	}
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <gpio_pin_pull>:

void gpio_pin_pull(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_pull_t pull)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
 800045c:	4613      	mov	r3, r2
 800045e:	70bb      	strb	r3, [r7, #2]
	switch (pull)
 8000460:	78bb      	ldrb	r3, [r7, #2]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d035      	beq.n	80004d2 <gpio_pin_pull+0x82>
 8000466:	2b02      	cmp	r3, #2
 8000468:	dc4a      	bgt.n	8000500 <gpio_pin_pull+0xb0>
 800046a:	2b00      	cmp	r3, #0
 800046c:	d002      	beq.n	8000474 <gpio_pin_pull+0x24>
 800046e:	2b01      	cmp	r3, #1
 8000470:	d018      	beq.n	80004a4 <gpio_pin_pull+0x54>
 8000472:	e045      	b.n	8000500 <gpio_pin_pull+0xb0>
	{
	case no_pull:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	78fa      	ldrb	r2, [r7, #3]
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	2101      	movs	r1, #1
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	43d2      	mvns	r2, r2
 8000484:	401a      	ands	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	78fa      	ldrb	r2, [r7, #3]
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	3201      	adds	r2, #1
 8000494:	2101      	movs	r1, #1
 8000496:	fa01 f202 	lsl.w	r2, r1, r2
 800049a:	43d2      	mvns	r2, r2
 800049c:	401a      	ands	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	60da      	str	r2, [r3, #12]
		break;
 80004a2:	e045      	b.n	8000530 <gpio_pin_pull+0xe0>

	case pull_up:
		//PUPDR 01: Pull-up
		set_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	78fa      	ldrb	r2, [r7, #3]
 80004aa:	0052      	lsls	r2, r2, #1
 80004ac:	2101      	movs	r1, #1
 80004ae:	fa01 f202 	lsl.w	r2, r1, r2
 80004b2:	431a      	orrs	r2, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	78fa      	ldrb	r2, [r7, #3]
 80004be:	0052      	lsls	r2, r2, #1
 80004c0:	3201      	adds	r2, #1
 80004c2:	2101      	movs	r1, #1
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	401a      	ands	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60da      	str	r2, [r3, #12]
		break;
 80004d0:	e02e      	b.n	8000530 <gpio_pin_pull+0xe0>

	case pull_down:
		//PUPDR 10: Pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	78fa      	ldrb	r2, [r7, #3]
 80004d8:	0052      	lsls	r2, r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	fa01 f202 	lsl.w	r2, r1, r2
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	401a      	ands	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	60da      	str	r2, [r3, #12]
		set_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	78fa      	ldrb	r2, [r7, #3]
 80004ee:	0052      	lsls	r2, r2, #1
 80004f0:	3201      	adds	r2, #1
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	60da      	str	r2, [r3, #12]
		break;
 80004fe:	e017      	b.n	8000530 <gpio_pin_pull+0xe0>

	default:
		//PUPDR 00: No pull-up, pull-down
		clr_bit(GPIOx->GPIOx_PUPDR, (pin*2));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	78fa      	ldrb	r2, [r7, #3]
 8000506:	0052      	lsls	r2, r2, #1
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f202 	lsl.w	r2, r1, r2
 800050e:	43d2      	mvns	r2, r2
 8000510:	401a      	ands	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	60da      	str	r2, [r3, #12]
		clr_bit(GPIOx->GPIOx_PUPDR, ((pin*2)+1));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	78fa      	ldrb	r2, [r7, #3]
 800051c:	0052      	lsls	r2, r2, #1
 800051e:	3201      	adds	r2, #1
 8000520:	2101      	movs	r1, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	43d2      	mvns	r2, r2
 8000528:	401a      	ands	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	60da      	str	r2, [r3, #12]
		break;
 800052e:	bf00      	nop
	}
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <gpio_pin_write>:

void gpio_pin_write(volatile gpio_t* GPIOx, gpio_pin_t pin, gpio_level level)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	70fb      	strb	r3, [r7, #3]
 8000546:	4613      	mov	r3, r2
 8000548:	70bb      	strb	r3, [r7, #2]
	switch (level)
 800054a:	78bb      	ldrb	r3, [r7, #2]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <gpio_pin_write+0x1c>
 8000550:	2b01      	cmp	r3, #1
 8000552:	d009      	beq.n	8000568 <gpio_pin_write+0x2e>
 8000554:	e010      	b.n	8000578 <gpio_pin_write+0x3e>
	{
	case gpio_low:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<(pin+16));
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	3310      	adds	r3, #16
 800055a:	2201      	movs	r2, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	619a      	str	r2, [r3, #24]
		break;
 8000566:	e00f      	b.n	8000588 <gpio_pin_write+0x4e>

	case gpio_high:
		//BS 1: Sets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	2201      	movs	r2, #1
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	619a      	str	r2, [r3, #24]
		break;
 8000576:	e007      	b.n	8000588 <gpio_pin_write+0x4e>

	default:
		//BR 1: Resets the corresponding ODRx bit
		GPIOx->GPIOx_BSRR = (1<<pin);
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	2201      	movs	r2, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	461a      	mov	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	619a      	str	r2, [r3, #24]
		break;
 8000586:	bf00      	nop
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
	...

08000594 <AHB_PRE_SELECT>:
 *      Author: moham
 */
#include "rcc.h"

static void AHB_PRE_SELECT (rcc_ahb_pre_t AHB_PRE)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	switch (AHB_PRE)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b08      	cmp	r3, #8
 80005a2:	f200 80f6 	bhi.w	8000792 <AHB_PRE_SELECT+0x1fe>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <AHB_PRE_SELECT+0x18>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005d1 	.word	0x080005d1
 80005b0:	08000603 	.word	0x08000603
 80005b4:	08000635 	.word	0x08000635
 80005b8:	08000667 	.word	0x08000667
 80005bc:	08000699 	.word	0x08000699
 80005c0:	080006cb 	.word	0x080006cb
 80005c4:	080006fd 	.word	0x080006fd
 80005c8:	0800072f 	.word	0x0800072f
 80005cc:	08000761 	.word	0x08000761
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80005d0:	4b7f      	ldr	r3, [pc, #508]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	4a7e      	ldr	r2, [pc, #504]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005d6:	f023 0310 	bic.w	r3, r3, #16
 80005da:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80005dc:	4b7c      	ldr	r3, [pc, #496]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	4a7b      	ldr	r2, [pc, #492]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005e2:	f023 0320 	bic.w	r3, r3, #32
 80005e6:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80005e8:	4b79      	ldr	r3, [pc, #484]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a78      	ldr	r2, [pc, #480]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005f2:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 80005f4:	4b76      	ldr	r3, [pc, #472]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4a75      	ldr	r2, [pc, #468]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80005fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005fe:	6093      	str	r3, [r2, #8]
		break;
 8000600:	e0e0      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000602:	4b73      	ldr	r3, [pc, #460]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	4a72      	ldr	r2, [pc, #456]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000608:	f023 0310 	bic.w	r3, r3, #16
 800060c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800060e:	4b70      	ldr	r3, [pc, #448]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	4a6f      	ldr	r2, [pc, #444]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000614:	f023 0320 	bic.w	r3, r3, #32
 8000618:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800061a:	4b6d      	ldr	r3, [pc, #436]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a6c      	ldr	r2, [pc, #432]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000624:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000626:	4b6a      	ldr	r3, [pc, #424]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	4a69      	ldr	r2, [pc, #420]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000630:	6093      	str	r3, [r2, #8]
		break;
 8000632:	e0c7      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000634:	4b66      	ldr	r3, [pc, #408]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a65      	ldr	r2, [pc, #404]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800063a:	f043 0310 	orr.w	r3, r3, #16
 800063e:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000640:	4b63      	ldr	r3, [pc, #396]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	4a62      	ldr	r2, [pc, #392]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000646:	f023 0320 	bic.w	r3, r3, #32
 800064a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800064c:	4b60      	ldr	r3, [pc, #384]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a5f      	ldr	r2, [pc, #380]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000656:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000658:	4b5d      	ldr	r3, [pc, #372]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a5c      	ldr	r2, [pc, #368]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800065e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000662:	6093      	str	r3, [r2, #8]
		break;
 8000664:	e0ae      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000666:	4b5a      	ldr	r3, [pc, #360]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	4a59      	ldr	r2, [pc, #356]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800066c:	f023 0310 	bic.w	r3, r3, #16
 8000670:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 8000672:	4b57      	ldr	r3, [pc, #348]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	4a56      	ldr	r2, [pc, #344]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000678:	f043 0320 	orr.w	r3, r3, #32
 800067c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 800067e:	4b54      	ldr	r3, [pc, #336]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	4a53      	ldr	r2, [pc, #332]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000688:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 800068a:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4a50      	ldr	r2, [pc, #320]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6093      	str	r3, [r2, #8]
		break;
 8000696:	e095      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000698:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a4c      	ldr	r2, [pc, #304]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 80006a4:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	4a49      	ldr	r2, [pc, #292]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006aa:	f043 0320 	orr.w	r3, r3, #32
 80006ae:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80006b0:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	4a46      	ldr	r2, [pc, #280]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ba:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80006bc:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	4a43      	ldr	r2, [pc, #268]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c6:	6093      	str	r3, [r2, #8]
		break;
 80006c8:	e07c      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_64:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 80006ca:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	4a40      	ldr	r2, [pc, #256]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006d0:	f023 0310 	bic.w	r3, r3, #16
 80006d4:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a3d      	ldr	r2, [pc, #244]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006dc:	f023 0320 	bic.w	r3, r3, #32
 80006e0:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 80006e2:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	4a3a      	ldr	r2, [pc, #232]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ec:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 80006ee:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	4a37      	ldr	r2, [pc, #220]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6093      	str	r3, [r2, #8]
		break;
 80006fa:	e063      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_128:
		set_bit(RCC->RCC_CFGR,HPRE0);
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	4a33      	ldr	r2, [pc, #204]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	4a30      	ldr	r2, [pc, #192]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800070e:	f023 0320 	bic.w	r3, r3, #32
 8000712:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	4a2d      	ldr	r2, [pc, #180]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800071a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072a:	6093      	str	r3, [r2, #8]
		break;
 800072c:	e04a      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_256:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000734:	f023 0310 	bic.w	r3, r3, #16
 8000738:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6093      	str	r3, [r2, #8]
		break;
 800075e:	e031      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	case RCC_AHB_PRE_512:
		set_bit(RCC->RCC_CFGR,HPRE0);
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4a1a      	ldr	r2, [pc, #104]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE1);
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000772:	f043 0320 	orr.w	r3, r3, #32
 8000776:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE2);
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800077e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000782:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,HPRE3);
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	4a11      	ldr	r2, [pc, #68]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 800078a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078e:	6093      	str	r3, [r2, #8]
		break;
 8000790:	e018      	b.n	80007c4 <AHB_PRE_SELECT+0x230>
	default:
		clr_bit(RCC->RCC_CFGR,HPRE0);
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 8000798:	f023 0310 	bic.w	r3, r3, #16
 800079c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE1);
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80007a4:	f023 0320 	bic.w	r3, r3, #32
 80007a8:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE2);
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80007b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007b4:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,HPRE3);
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <AHB_PRE_SELECT+0x23c>)
 80007bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007c0:	6093      	str	r3, [r2, #8]
		break;
 80007c2:	bf00      	nop
	}
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <APB1_PRE_SELECT>:

static void APB1_PRE_SELECT (rcc_ahb_pre_t APB1_PRE)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	switch (APB1_PRE)
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d86c      	bhi.n	80008be <APB1_PRE_SELECT+0xea>
 80007e4:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <APB1_PRE_SELECT+0x18>)
 80007e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ea:	bf00      	nop
 80007ec:	08000801 	.word	0x08000801
 80007f0:	08000827 	.word	0x08000827
 80007f4:	0800084d 	.word	0x0800084d
 80007f8:	08000873 	.word	0x08000873
 80007fc:	08000899 	.word	0x08000899
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8000800:	4b32      	ldr	r3, [pc, #200]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4a31      	ldr	r2, [pc, #196]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800080a:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000816:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE12);
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800081e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000822:	6093      	str	r3, [r2, #8]
		break;
 8000824:	e04c      	b.n	80008c0 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4a28      	ldr	r2, [pc, #160]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800082c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000830:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000838:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800083c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000848:	6093      	str	r3, [r2, #8]
		break;
 800084a:	e039      	b.n	80008c0 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE10);
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000856:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE11);
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800085e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000862:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	4a18      	ldr	r2, [pc, #96]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800086a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800086e:	6093      	str	r3, [r2, #8]
		break;
 8000870:	e026      	b.n	80008c0 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE10);
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800087c:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000888:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 8000890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000894:	6093      	str	r3, [r2, #8]
		break;
 8000896:	e013      	b.n	80008c0 <APB1_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE10);
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 800089e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a2:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE11);
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 80008aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008ae:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE12);
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	4a05      	ldr	r2, [pc, #20]	; (80008cc <APB1_PRE_SELECT+0xf8>)
 80008b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008ba:	6093      	str	r3, [r2, #8]
		break;
 80008bc:	e000      	b.n	80008c0 <APB1_PRE_SELECT+0xec>
	default:
		break;
 80008be:	bf00      	nop
	}
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <APB2_PRE_SELECT>:

static void APB2_PRE_SELECT (rcc_ahb_pre_t APB2_PRE)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	switch (APB2_PRE)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d86c      	bhi.n	80009ba <APB2_PRE_SELECT+0xea>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <APB2_PRE_SELECT+0x18>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	080008fd 	.word	0x080008fd
 80008ec:	08000923 	.word	0x08000923
 80008f0:	08000949 	.word	0x08000949
 80008f4:	0800096f 	.word	0x0800096f
 80008f8:	08000995 	.word	0x08000995
	{
	case RCC_AHB_PRE_1:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 80008fc:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000902:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000906:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000908:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800090e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000912:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE22);
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800091a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800091e:	6093      	str	r3, [r2, #8]
		break;
 8000920:	e04c      	b.n	80009bc <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_2:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800092c:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000938:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4a22      	ldr	r2, [pc, #136]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000944:	6093      	str	r3, [r2, #8]
		break;
 8000946:	e039      	b.n	80009bc <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_4:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800094e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000952:	6093      	str	r3, [r2, #8]
		clr_bit(RCC->RCC_CFGR,PPRE21);
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800095a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800095e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800096a:	6093      	str	r3, [r2, #8]
		break;
 800096c:	e026      	b.n	80009bc <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_8:
		clr_bit(RCC->RCC_CFGR,PPRE20);
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000974:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000978:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800098c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000990:	6093      	str	r3, [r2, #8]
		break;
 8000992:	e013      	b.n	80009bc <APB2_PRE_SELECT+0xec>
	case RCC_AHB_PRE_16:
		set_bit(RCC->RCC_CFGR,PPRE20);
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 800099a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800099e:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE21);
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 80009a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009aa:	6093      	str	r3, [r2, #8]
		set_bit(RCC->RCC_CFGR,PPRE22);
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <APB2_PRE_SELECT+0xf8>)
 80009b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b6:	6093      	str	r3, [r2, #8]
		break;
 80009b8:	e000      	b.n	80009bc <APB2_PRE_SELECT+0xec>
	default:
		break;
 80009ba:	bf00      	nop
	}
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <rcc_sys_init_pllp_42MHz_all>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b01 );
}

void rcc_sys_init_pllp_42MHz_all(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

	//• f(VCO clock) = f(PLL clock input) × (PLLN / PLLM) >> 16M × (84 / 8) = 168M
	//• f(PLL general clock output) = f(VCO clock) / PLLP >> 168 / 2 = 84

	//HSI_as_source
	clr_bit(RCC->RCC_PLLCFGR,PLLSRC);
 80009d0:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	4a5b      	ldr	r2, [pc, #364]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009da:	6053      	str	r3, [r2, #4]

	//Q = 4 >> 0b0100
	clr_bit(RCC->RCC_PLLCFGR,PLLQ0);
 80009dc:	4b59      	ldr	r3, [pc, #356]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a58      	ldr	r2, [pc, #352]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009e6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ1);
 80009e8:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a55      	ldr	r2, [pc, #340]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80009f2:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLQ2);
 80009f4:	4b53      	ldr	r3, [pc, #332]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	4a52      	ldr	r2, [pc, #328]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 80009fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009fe:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLQ3);
 8000a00:	4b50      	ldr	r3, [pc, #320]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	4a4f      	ldr	r2, [pc, #316]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a06:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000a0a:	6053      	str	r3, [r2, #4]

	//P = 2 >> 0b00
	clr_bit(RCC->RCC_PLLCFGR,PLLP0);
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a16:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLP1);
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	4a49      	ldr	r2, [pc, #292]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a22:	6053      	str	r3, [r2, #4]

	//N = 84 >> 0b001010100
	clr_bit(RCC->RCC_PLLCFGR,PLLN0);
 8000a24:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a46      	ldr	r2, [pc, #280]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a2e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN1);
 8000a30:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a43      	ldr	r2, [pc, #268]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a3a:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN2);
 8000a3c:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a40      	ldr	r2, [pc, #256]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN3);
 8000a48:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a3d      	ldr	r2, [pc, #244]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a52:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN4);
 8000a54:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a3a      	ldr	r2, [pc, #232]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5e:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN5);
 8000a60:	4b38      	ldr	r3, [pc, #224]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a37      	ldr	r2, [pc, #220]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a6a:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLN6);
 8000a6c:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a34      	ldr	r2, [pc, #208]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a76:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN7);
 8000a78:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a82:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLN8);
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a8e:	6053      	str	r3, [r2, #4]

	//M = 8 >> 0b01000
	clr_bit(RCC->RCC_PLLCFGR,PLLM0);
 8000a90:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a2b      	ldr	r2, [pc, #172]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a96:	f023 0301 	bic.w	r3, r3, #1
 8000a9a:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM1);
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aa2:	f023 0302 	bic.w	r3, r3, #2
 8000aa6:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM2);
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aae:	f023 0304 	bic.w	r3, r3, #4
 8000ab2:	6053      	str	r3, [r2, #4]
	set_bit(RCC->RCC_PLLCFGR,PLLM3);
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM4);
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ac6:	f023 0310 	bic.w	r3, r3, #16
 8000aca:	6053      	str	r3, [r2, #4]
	clr_bit(RCC->RCC_PLLCFGR,PLLM5);
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000ad2:	f023 0320 	bic.w	r3, r3, #32
 8000ad6:	6053      	str	r3, [r2, #4]

	//AHB prescaler /2 84/2 = 42MHz
	AHB_PRE_SELECT(RCC_AHB_PRE_2);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff fd5b 	bl	8000594 <AHB_PRE_SELECT>

	//APB1 prescaler /1  42MHz
	APB1_PRE_SELECT(RCC_APB1_PRE_1);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fe78 	bl	80007d4 <APB1_PRE_SELECT>

	//APB2 prescaler /1  42MHz
	APB2_PRE_SELECT(RCC_APB1_PRE_1);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fef3 	bl	80008d0 <APB2_PRE_SELECT>

	//enable the PLL clk
	set_bit(RCC->RCC_CR,PLLON);
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af4:	6013      	str	r3, [r2, #0]

	//wait for PLL to be stable
	while (get_bit(RCC->RCC_CR,PLLRDY) == 0);
 8000af6:	bf00      	nop
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	0e5b      	lsrs	r3, r3, #25
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f8      	beq.n	8000af8 <rcc_sys_init_pllp_42MHz_all+0x12c>

	//System clock switch >> HSI oscillator selected as system clock
	clr_bit(RCC->RCC_CFGR,SW0);
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b0c:	f023 0301 	bic.w	r3, r3, #1
 8000b10:	6093      	str	r3, [r2, #8]
	set_bit(RCC->RCC_CFGR,SW1);
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6093      	str	r3, [r2, #8]

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b10 );
 8000b1e:	bf00      	nop
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	f003 0202 	and.w	r2, r3, #2
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <rcc_sys_init_pllp_42MHz_all+0x178>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	4313      	orrs	r3, r2
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d1f1      	bne.n	8000b20 <rcc_sys_init_pllp_42MHz_all+0x154>
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <rcc_ahb1_clk_enable>:

	while ( ((get_bit(RCC->RCC_CFGR,SWS1) << 1) | (get_bit(RCC->RCC_CFGR,SWS0))) != 0b11 );
}

void rcc_ahb1_clk_enable(rcc_ahb1_peripherals peripheral)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_AHB1ENR, peripheral);
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <rcc_ahb1_clk_enable+0x28>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a03      	ldr	r2, [pc, #12]	; (8000b70 <rcc_ahb1_clk_enable+0x28>)
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	40023800 	.word	0x40023800

08000b74 <rcc_apb1_clk_enable>:
{
	set_bit(RCC->RCC_AHB3ENR, peripheral);
}

void rcc_apb1_clk_enable(rcc_apb1_peripherals peripheral)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	set_bit(RCC->RCC_APB1ENR, peripheral);
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <rcc_apb1_clk_enable+0x28>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	79fa      	ldrb	r2, [r7, #7]
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <rcc_apb1_clk_enable+0x28>)
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <tim_init>:
 *      Author: moham
 */
#include "stim.h"

void tim_init(tim_t* tim)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (tim->config.mode == tim_basic)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f040 80a6 	bne.w	8000cfe <tim_init+0x15e>
	{
		//counter is disabled
		clr_bit(tim->n->TIMx_CR1, CEN);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0201 	bic.w	r2, r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]

		//UEV enabled. (update event enabled)
		clr_bit(tim->n->TIMx_CR1, UDIS);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f022 0202 	bic.w	r2, r2, #2
 8000bd0:	601a      	str	r2, [r3, #0]

		//Only counter overflow/underflow generates an update interrupt
		set_bit(tim->n->TIMx_CR1, URS);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f042 0204 	orr.w	r2, r2, #4
 8000be0:	601a      	str	r2, [r3, #0]

		//Counter is not stopped at update event
		clr_bit(tim->n->TIMx_CR1, OPM);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 0208 	bic.w	r2, r2, #8
 8000bf0:	601a      	str	r2, [r3, #0]

		//Counter used as down-counter
		set_bit(tim->n->TIMx_CR1, DIR);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f042 0210 	orr.w	r2, r2, #16
 8000c00:	601a      	str	r2, [r3, #0]

		//Edge-aligned mode.
		clr_bit(tim->n->TIMx_CR1, CMS0);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0220 	bic.w	r2, r2, #32
 8000c10:	601a      	str	r2, [r3, #0]
		clr_bit(tim->n->TIMx_CR1, CMS1);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c20:	601a      	str	r2, [r3, #0]

		//TIMx_ARR register is buffered
		set_bit(tim->n->TIMx_CR1, ARPE);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c30:	601a      	str	r2, [r3, #0]

		if (tim->config.update_int == tim_update_interrupt_disable)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d108      	bne.n	8000c4c <tim_init+0xac>
		{
			//Disable Update Event Interrupt
			clr_bit(tim->n->TIMx_DIER, UIE);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	e00f      	b.n	8000c6c <tim_init+0xcc>
		}
		else if (tim->config.update_int == tim_update_interrupt_enable)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7a5b      	ldrb	r3, [r3, #9]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d108      	bne.n	8000c66 <tim_init+0xc6>
		{
			//Enable Update Event Interrupt
			set_bit(tim->n->TIMx_DIER, UIE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 0201 	orr.w	r2, r2, #1
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	e002      	b.n	8000c6c <tim_init+0xcc>
		}
		else
		{
			tim->config.update_int = tim_null;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	22ff      	movs	r2, #255	; 0xff
 8000c6a:	725a      	strb	r2, [r3, #9]
		}


		if ( (tim->n == TIM3) || (tim->n == TIM4) )
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <tim_init+0x168>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d004      	beq.n	8000c80 <tim_init+0xe0>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <tim_init+0x16c>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d105      	bne.n	8000c8c <tim_init+0xec>
			tim->n->TIMx_CNT = 0xFFFF;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
 8000c8a:	e00e      	b.n	8000caa <tim_init+0x10a>
		else if ( (tim->n == TIM2) || (tim->n == TIM5) )
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c94:	d004      	beq.n	8000ca0 <tim_init+0x100>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1d      	ldr	r2, [pc, #116]	; (8000d10 <tim_init+0x170>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d104      	bne.n	8000caa <tim_init+0x10a>
			tim->n->TIMx_CNT = 0xFFFFFFFF;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
		else;

		if (tim->config.unit == tim_us)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7a1b      	ldrb	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10d      	bne.n	8000cce <tim_init+0x12e>
		{
			//Set tick time to be 0.5 uS
			tim->n->TIMx_PSC = ((tim->config.tim_clk_mhz)/2);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	795b      	ldrb	r3, [r3, #5]
 8000cb6:	085b      	lsrs	r3, r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
			tim->n->TIMx_ARR = (2*(tim->config.event_tick));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	88db      	ldrh	r3, [r3, #6]
 8000cc4:	005a      	lsls	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
		{
			tim->config.unit = tim_null;
		}
	}

}
 8000ccc:	e017      	b.n	8000cfe <tim_init+0x15e>
		else if (tim->config.unit == tim_ms)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d110      	bne.n	8000cf8 <tim_init+0x158>
			tim->n->TIMx_PSC = (((tim->config.tim_clk_mhz)*1000)/2);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	795b      	ldrb	r3, [r3, #5]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce0:	fb03 f202 	mul.w	r2, r3, r2
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
			tim->n->TIMx_ARR = (2*(tim->config.event_tick));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	88db      	ldrh	r3, [r3, #6]
 8000cee:	005a      	lsls	r2, r3, #1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cf6:	e002      	b.n	8000cfe <tim_init+0x15e>
			tim->config.unit = tim_null;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	22ff      	movs	r2, #255	; 0xff
 8000cfc:	721a      	strb	r2, [r3, #8]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	40000800 	.word	0x40000800
 8000d10:	40000c00 	.word	0x40000c00

08000d14 <tim_start>:

void tim_start (tim_t* tim)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	//counter is enabled
	set_bit(tim->n->TIMx_CR1, CEN);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0201 	orr.w	r2, r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <__libc_init_array>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	4d0d      	ldr	r5, [pc, #52]	; (8000d70 <__libc_init_array+0x38>)
 8000d3c:	4c0d      	ldr	r4, [pc, #52]	; (8000d74 <__libc_init_array+0x3c>)
 8000d3e:	1b64      	subs	r4, r4, r5
 8000d40:	10a4      	asrs	r4, r4, #2
 8000d42:	2600      	movs	r6, #0
 8000d44:	42a6      	cmp	r6, r4
 8000d46:	d109      	bne.n	8000d5c <__libc_init_array+0x24>
 8000d48:	4d0b      	ldr	r5, [pc, #44]	; (8000d78 <__libc_init_array+0x40>)
 8000d4a:	4c0c      	ldr	r4, [pc, #48]	; (8000d7c <__libc_init_array+0x44>)
 8000d4c:	f000 f818 	bl	8000d80 <_init>
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	10a4      	asrs	r4, r4, #2
 8000d54:	2600      	movs	r6, #0
 8000d56:	42a6      	cmp	r6, r4
 8000d58:	d105      	bne.n	8000d66 <__libc_init_array+0x2e>
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d60:	4798      	blx	r3
 8000d62:	3601      	adds	r6, #1
 8000d64:	e7ee      	b.n	8000d44 <__libc_init_array+0xc>
 8000d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6a:	4798      	blx	r3
 8000d6c:	3601      	adds	r6, #1
 8000d6e:	e7f2      	b.n	8000d56 <__libc_init_array+0x1e>
 8000d70:	08000d98 	.word	0x08000d98
 8000d74:	08000d98 	.word	0x08000d98
 8000d78:	08000d98 	.word	0x08000d98
 8000d7c:	08000d9c 	.word	0x08000d9c

08000d80 <_init>:
 8000d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d82:	bf00      	nop
 8000d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d86:	bc08      	pop	{r3}
 8000d88:	469e      	mov	lr, r3
 8000d8a:	4770      	bx	lr

08000d8c <_fini>:
 8000d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8e:	bf00      	nop
 8000d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d92:	bc08      	pop	{r3}
 8000d94:	469e      	mov	lr, r3
 8000d96:	4770      	bx	lr
